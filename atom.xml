<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChanCherry&#39;s Blog</title>
  
  <subtitle>Ordinary life , Unwilling to be ordinary code farmers</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-03T04:59:06.631Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChanCherry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>X-Forwarded-For</title>
    <link href="http://yoursite.com/2020/02/03/X-Forwarded-For/"/>
    <id>http://yoursite.com/2020/02/03/X-Forwarded-For/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:59:06.631Z</updated>
    
    <content type="html"><![CDATA[<p>简称<strong>XFF头</strong>，是一个扩展头，它代表客户端也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项（百度百科：用来识别通过HTTP代理或负载均衡方式连接到Web服务器的<strong>客户端最原始的IP地址</strong>的<strong>HTTP请求头字段</strong>）。<br>X-Forwarded-For请求头格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:client,proxy1,proxy2</span><br></pre></td></tr></table></figure><p>格式比较简单，首先是离服务端最远的设备IP，然后就是每一级代理设备的IP。如果一个HTTP请求到达服务器之前，经过了三个代理Proxy1、Proxy2、Proxy3，IP分别为IP1、IP2、IP3，用户真实IP是IP0，那么根据XFF标准，服务器最终会收到下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:IP0,IP1,IP2</span><br></pre></td></tr></table></figure><p>Proxy3直连服务器，它会给XFF追加IP2，帮Proxy2转发请求。列表中并没有 IP3，IP3 可以在服务端通过 $ remote_address 字段获得。我们知道 HTTP 连接基于 TCP 连接，HTTP 协议中没有 IP 的概念，$remote_address 来自 TCP 连接，表示与服务端建立 TCP 连接的设备 IP，在这个例子里就是 IP3。<br>详细分析一下，这样的结果是经过这样的流程而形成的：</p><ol><li>用户IP0—&gt; 代理Proxy1（IP1），Proxy1记录用户IP0，并将请求转发给Proxy2时，带上一个Http Header <code>X-Forwarded-For: IP0</code>。</li><li>Proxy2收到请求后读取到请求有 X-Forwarded-For: IP0，然后Proxy2 继续把链接上来的Proxy1 IP追加到 X-Forwarded-For 上面，构造出X-Forwarded-For: IP0, IP1，继续转发请求给Proxy 3。</li><li>同理，Proxy3 按照第二部构造出 X-Forwarded-For: IP0, IP1, IP2,转发给真正的服务器，比如nginx，nginx收到了http请求，里面就是 X-Forwarded-For: IP0, IP1, IP2 这样的结果。所以Proxy 3 的IP3，不会出现在这里。</li><li>nginx 获取Proxy3的IP 能通过$ remote_address获取到，因为这个<br>$ remote_address就是真正建立TCP链接的IP，这个不能伪造，是直接产生链接的IP。$remote_address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求。</li></ol><p>如果没有XFF或者另外一种相似的技术，所有通过代理服务器的连接只会显示代理服务器的IP地址，而非连接发起的原始IP地址，这样的代理服务器实际上充当了匿名服务提供者的角色，<em>如果连接的原始IP地址不可得，恶意访问的检测与预防的难度将大大增加</em>。<br>XFF的有效性依赖于代理服务器提供的连接原始IP地址的真实性，因此，XFF的有效使用应该保证代理服务器是可信的，比如可以通过创建可信服务器白名单的方式。</p><p>部分转载自<a href="https://www.jianshu.com/p/15f3498a7fad" target="_blank" rel="noopener">https://www.jianshu.com/p/15f3498a7fad</a>，（侵权删</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简称&lt;strong&gt;XFF头&lt;/strong&gt;，是一个扩展头，它代表客户端也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项（百度百科：用来识别通过HTTP代理或负载均衡方式连接到Web服务器的&lt;strong&gt;客户端最原始的IP地址
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://yoursite.com/2020/02/03/CSRF&amp;SSRF%E7%AE%80%E6%9E%90/"/>
    <id>http://yoursite.com/2020/02/03/CSRF&amp;SSRF%E7%AE%80%E6%9E%90/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:56:43.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h2><p>跨站请求伪造，是一种对网站的恶意利用。XSS利用站点内地信任用户，而CSRF通过伪装来自信任用户的请求来利用受信任的网站。与XSS相比，CSRF攻击往往不大流行（因此对其防范的资源也相对较少）和难以防范，所以被认为比XSS更具危险性。一个场景，跨域发出了一个请求，可以无JavaScript参加，请求是身份认证后的。一般分为HTML CSRF,JOSN HiJacking攻击和Flash CSRF。<br><img src="https://img-blog.csdnimg.cn/2019072818034721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h2><p>一个CSRF漏洞攻击的实现，需要由“三个部分”构成：</p><ol><li>有一个漏洞存在（无需验证，任意修改后台数据，新增请求）；</li><li>伪装数据操纵请求的恶意链接或页面；</li><li>诱使用户主动访问或登录恶意链接，触发非法操作。</li></ol><ul><li><input disabled="" type="checkbox"> 第一部分    漏洞的存在</li></ul><p>关键字：跨站请求漏洞（CSR:Cross Site Request）<br>如果需要CSRF攻击能够成功，首先就需要目标站点或系统存在一个可以进行数据修改或新增操作，且此操作被提交后台之后的过程中，其未提供任何身份识别和校验的参数。后台只要收到请求，就立即下发数据修改或新增的操作。<br>以上漏洞情况的存在，出现场景比较多的用户密码的修改、购物地址的修改或后台管理账户的新增等操作过程中。</p><ul><li><input disabled="" type="checkbox"> 第二部分    漏洞利用的伪装</li></ul><p>关键字：伪装请求（F:Forgery）<br>CSRF漏洞存在了，如果需要真正的被利用，还需要对“修改或新增”数据操作请求的伪装，此时恶意攻击者只要将伪装好的“数据修改或新增”的请求发送给被攻击者，或者通过社工的方式诱使被攻击者在其cookie还生效的情况下点击该请求链接，即可触发CSRF漏洞，成功修改或新增当前用户的数据信息，如修改当前用户的密码，又或者是当前用户为后台管理员，触发漏洞后又新增了一个后台管理员。</p><ul><li><input disabled="" type="checkbox"> 第三部分    用户非本意的操作</li></ul><p>关键字：非本意的操作<br>当前用户在不知情的情况下，访问了黑客恶意构造的页面或链接，即在非本意的情况下完成黑客想完成的非法操作，实现了对当前用户个人信息的恶意操作。后台审计只能审计到用户的信息，并不能审计到黑客的信息。</p><h2 id="简单实验"><a href="#简单实验" class="headerlink" title="简单实验"></a>简单实验</h2><p>首先需要一个简单的登录来实现基于session的会话访问控制<br>登录页面：没有用到数据库，账号密码固定<br>登出界面：logout.php，session_destroy()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start[<span class="string">'username'</span>];</span><br><span class="line">$usr=$_POST[<span class="string">'usrname'</span>];</span><br><span class="line">$pwd=$_POST[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span>($usr==<span class="string">'admin'</span> &amp;&amp; $pwd===<span class="string">'admin'</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'登录成功'</span>;</span><br><span class="line">$_SEESION[<span class="string">'admin'</span>]=<span class="number">1</span>;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line"><span class="keyword">echo</span> <span class="number">111</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'登录失败'</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理员的界面：模拟一个添加管理员的功能，通过if判断和echo实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'admin'</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'你不是管理员'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$usr=$_GET[<span class="string">'user'</span>];</span><br><span class="line"><span class="comment">//这里模拟一个添加管理员的功能，可以将get传参的内容添加成管理员</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($usr))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'管理员'</span>.usr.<span class="string">'添加成功'</span>;</span><br><span class="line">$log=fopen(<span class="string">"admin.txt"</span>,<span class="string">"a"</span>);</span><br><span class="line">fwrite($log,$usr.<span class="string">"\n"</span>);</span><br><span class="line">fclose($log);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'请输入想要添加的管理员用户名'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>实验开始：</p><p>首先将login.php，manage.php，logout.php放入本机的php环境，假设本机是管理员使用的机器。本机的ip 127.0.0.1就当作是我们要攻击的服务器的ip，虚拟机的192.168.123.211当作一个管理员和攻击者都可以访问的外网服务器地址。</p><p>现在本机登录管理员界面manage.php，尝试添加管理员，使用的url如下：<br><code>http://127.0.0.1/test/session/csrf/manage.php?user=123</code>（这里url需要和自己搭建的路径一致）此时去读admin.txt，会发现里面成功增加了123。</p><p>现在攻击者在虚拟机中写一个html页面，这个页面的url是：<code>http://192.168.123.211/123/1.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1/test/session/csrf/manage.php?user=123"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你看到这个页面并不知道里面是什么内容，如果攻击者给它加上伪装，例如点击链接可以获得优惠券或红包，可能有些用户就会上当了。这时实际上，就会在用户的admin.txt里面添加一个新管理员，于是，用户就受到了csrf攻击。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>构造一个恶意链接或者html页面<br>CSRF漏洞的目的：利用一个已存在的漏洞，构造一个“恶意链接”或者“html页面”，然后诱使用户点击触发此漏洞。<br>目标站点存在一个漏洞（CSRF），攻击者利用此类漏洞伪装了一个“恶意链接”或者“html页面”，诱使被攻击者在登录的情况下（即当前cookie有用的情况下）点击了此伪装请求，随后在用户不知情的情况下完成了对当前用户数据的修改或新增操作，而被修改的信息可能是用户的密码、关键信息又或者是新增后台管理员等。</p><ul><li>如何防范？<br>二次验证（验证cookie）。还有不仅验证cookie，还有验证referer字段、增加token机制等。<br>进行修改或新增操作时，会有相应的信息提示。</li></ul><hr><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h2><p>SSRF（Server-Side Request Forgery：服务器端请求伪造）是一种以攻击者构造形成，由服务器端发起请求的一个安全漏洞。一般情况下，SSRF漏洞攻击的对象是从外网无法访问的内部系统，正因为它是由服务器端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。</p><p>SSRF形成的原因大都是由于服务端提供了从其他服务器获取数据的功能，且没有对目标地址做过滤和限制，比如从指定url地址获取网页文本内容，加载指定地址的图片，下载等。我们外网通过web服务器去访问内网的数据库，web服务器帮我们去获取数据，相当于一个跳板，然后返回数据给我们。<br>比如加载指定地址的图片，web服务器访问内部的图片服务器，有可能会把所有的图片都泄露。</p><h2 id="SSRF常见危害"><a href="#SSRF常见危害" class="headerlink" title="SSRF常见危害"></a>SSRF常见危害</h2><ul><li>可以对外网，服务器所在内网，本地进行端口扫描，获取一些服务的Banner信息等</li><li>攻击运行在内网或本地的应用程序，如内网的OA,ERP系统等外网拿不到的，但是通过SSRF攻击可以攻击到这些系统</li><li>对内网web应用程序进行指纹识别，通过访问默认文件实现（如Readme文件）</li><li>攻击内外网web应用，主要是使用GET就可以实现的攻击（比如Struts2,SQLI等）</li><li>利用File协议读取本地文件等<h2 id="SSRF常见应用场景"><a href="#SSRF常见应用场景" class="headerlink" title="SSRF常见应用场景"></a>SSRF常见应用场景</h2></li><li>分享</li></ul><p>一些分享应用中，web应用在分享功能中，通常会获取目标url地址网页内容中的<code>&lt;title&gt;&lt;/title&gt;</code> 标签的文本内容作为显示来提供更好的体验，如果在此功能中没有对目标地址范围做过滤与限制就存在SSRF漏洞。如360的页面有一些其他网站的超链接。</p><ul><li>在线翻译</li></ul><p>通过url地址翻译对应文本的内容<br>提供此功能的国内公司有百度、有道等</p><ul><li>图片加载与下载</li></ul><p>图片加载远程图片地址此功能用到的地方很多，但大多比较隐秘，比如在有些公司中，加载自家图片服务器上的图片用于展示，开发者通常对图片做些微小调整例如加水印、压缩等，很大可能造成SSRF漏洞。</p><ul><li>图片、文章收藏功能</li><li>未公开的API实现以及其他调用URL的功能</li></ul><h2 id="如何防范？"><a href="#如何防范？" class="headerlink" title="如何防范？"></a>如何防范？</h2><p>对网站的ip地址进行严格的过滤，需要严格限定可以访问的地址，或者过滤掉内网IP地址，或者规定只能请求哪些URL，其他的一律不能请求，白名单。</p><p>以上来自360网络安全学院授课内容，侵权删</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSRF&quot;&gt;&lt;a href=&quot;#CSRF&quot; class=&quot;headerlink&quot; title=&quot;CSRF&quot;&gt;&lt;/a&gt;CSRF&lt;/h1&gt;&lt;h2 id=&quot;什么是CSRF&quot;&gt;&lt;a href=&quot;#什么是CSRF&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://yoursite.com/2020/02/03/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/02/03/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:57:59.983Z</updated>
    
    <content type="html"><![CDATA[<p>感觉web里面还会经常遇到php伪协议的，总结一下。</p><p>php支持的协议如下：</p><ol><li>file:// — 访问本地文件系统</li><li>http://— 访问Http(s)网址</li><li>ftp://— 访问ftp(s) urls</li><li>php:// — 访问各个输入/输出流（I/O streams）</li><li>zlib:// — 压缩流</li><li>data:// — 数据（RFC 2397）</li><li>glob:// — 查找匹配的文件路径模式</li><li>phar:// — PHP 归档</li><li>ssh2:// — Secure Shell 2</li><li>rar:// — RAR</li><li>ogg:// — 音频流</li><li>expect:// — 处理交互式的流<h1 id="环境概要"><a href="#环境概要" class="headerlink" title="环境概要"></a>环境概要</h1>PHP.ini:</li></ol><p>allow_url_fopen：默认为on  ，该选项为on便是激活了url 形式的 fopen封装协议，使得可以访问 url 对象文件等。</p><p>allow_url_include：  默认为off，不允许url里的封装协议访问对象文件。</p><h1 id="0x00-是否截断问题"><a href="#0x00-是否截断问题" class="headerlink" title="0x00 是否截断问题:"></a>0x00 是否截断问题:</h1><h2 id="不需要截断"><a href="#不需要截断" class="headerlink" title="不需要截断"></a>不需要截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="需要截断"><a href="#需要截断" class="headerlink" title="需要截断"></a>需要截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'file'</span>].<span class="string">'.php'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x01-allow-url-fopen与allow-url-include是否开启的问题："><a href="#0x01-allow-url-fopen与allow-url-include是否开启的问题：" class="headerlink" title="0x01 allow_url_fopen与allow_url_include是否开启的问题："></a>0x01 allow_url_fopen与allow_url_include是否开启的问题：</h1><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><p>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p>使用方法：<br>file:// [文件的绝对路径和文件名]<br><img src="https://img-blog.csdnimg.cn/20191009204203130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h2><p>条件：<br>不需要开启allow_url_fopen，仅php://input、 php://stdin、 php://memory 和 php://temp 需要开启allow_url_include。</p><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，<strong>php://filter用于读取源码</strong>，<strong>php://input用于执行php代码</strong>。</p><hr><p><strong>php://filter</strong> 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。<br>例如，有时url会传入<code>?file=php://filter/read=convert.base64-encode/resource=./cmd.php</code></p><p>PHP.ini：<br>php://filter在双off的情况下也可以正常使用；</p><p>allow_url_fopen ：off/on<br>allow_url_include：off/on</p><hr><p><strong>php://input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p><p>PHP.ini：</p><p>allow_url_fopen ：off/on<br>allow_url_include：on</p><p>例：<br><img src="https://img-blog.csdnimg.cn/20191009204108596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="zip-bzip2-zlib-协议"><a href="#zip-bzip2-zlib-协议" class="headerlink" title="zip://, bzip2://, zlib://协议"></a>zip://, bzip2://, zlib://协议</h2><p>PHP.ini：</p><p>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用；</p><p>allow_url_fopen ：off/on<br>allow_url_include：off/on</p><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。</p><h3 id="（1）zip-协议"><a href="#（1）zip-协议" class="headerlink" title="（1）zip://协议"></a>（1）zip://协议</h3><p>使用方法：<br>zip://archive.zip#dir/file.txt<br>zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]<br>（注：由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23）<br>例：<code>?file=zip://D:/soft/phpStudy/WWW/file.jpg%23phpcode.txt</code></p><h3 id="（2）bzip2-协议"><a href="#（2）bzip2-协议" class="headerlink" title="（2）bzip2://协议"></a>（2）bzip2://协议</h3><p>使用方法：<br>compress.bzip2://[压缩文件绝对路径或相对路径]<br>例：<code>?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg</code><br>或<code>?file=compress.bzip2://./file.jpg</code></p><h3 id="（3）zlib-协议"><a href="#（3）zlib-协议" class="headerlink" title="（3）zlib://协议"></a>（3）zlib://协议</h3><p>使用方法：<br>compress.zlib://file.gz<br>例（同上）：<code>?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg</code></p><hr><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p>PHP.ini：</p><p>data://协议必须双在on才能正常使用；</p><p>allow_url_fopen ：on<br>allow_url_include：on<br>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/test.php?file=data://text/plain,<span class="meta">&lt;?php</span> phpinfo()<span class="meta">?&gt;</span></span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data:text/plain,<span class="meta">&lt;?php</span> phpinfo()<span class="meta">?&gt;</span></span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br></pre></td></tr></table></figure><hr><p>借用一下FreeBuf的图最后总结一下<br><img src="https://img-blog.csdnimg.cn/2019100920385028.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文章转载自FreeBuf一个大佬的文章<a href="https://www.freebuf.com/column/148886.html" target="_blank" rel="noopener">https://www.freebuf.com/column/148886.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉web里面还会经常遇到php伪协议的，总结一下。&lt;/p&gt;
&lt;p&gt;php支持的协议如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;file:// — 访问本地文件系统&lt;/li&gt;
&lt;li&gt;http://— 访问Http(s)网址&lt;/li&gt;
&lt;li&gt;ftp://— 访问ftp(s) url
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的序列化和反序列化</title>
    <link href="http://yoursite.com/2020/02/03/Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/03/Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:57:28.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>众所周知，类的对象会随着程序的终止而被垃圾收集器销毁。如果要在不重新创建对象的情况下调用该类，该怎么做？这就可以通过序列化将数据转换为字节流。<br><strong>对象序列化</strong>是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为<strong>反序列化</strong>。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。<br>简言之，序列化就是在运行代码的时候，我们想保存多个对象的数据，就把内存里面的这些对象给变成一连串的字节。常见的就是变成文件，其实不序列化也可以保存文件，emmm</p><h2 id="什么时候需要序列化？"><a href="#什么时候需要序列化？" class="headerlink" title="什么时候需要序列化？"></a>什么时候需要序列化？</h2><p>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；<br>当你想用套接字在网络上传送对象的时候；<br>当你想通过RMI传输对象的时候；</p><h2 id="如何使Java类可序列化？"><a href="#如何使Java类可序列化？" class="headerlink" title="如何使Java类可序列化？"></a>如何使Java类可序列化？</h2><p>通过实现java.io.Serializable接口，可以在Java类中启用可序列化。它是一个标记接口，意味着它不包含任何方法或字段，仅用于标识可序列化的语义。</p><h2 id="试图序列化不可序列化的对象怎么办？"><a href="#试图序列化不可序列化的对象怎么办？" class="headerlink" title="试图序列化不可序列化的对象怎么办？"></a>试图序列化不可序列化的对象怎么办？</h2><p>将得到一个 RuntimeException 异常：主线程中出现异常 java.io.NotSerializableException。</p><h2 id="什么是serialVersionUID？"><a href="#什么是serialVersionUID？" class="headerlink" title="什么是serialVersionUID？"></a>什么是serialVersionUID？</h2><p>SerialVersionUID是一个标识符，当它通常使用对象的哈希码序列化时会标记在对象上。我们可以通过Java中serialver工具找到该对象的serialVersionUID。<br>语法：<strong>serialver classname</strong>，SerialVersionUID用于对象的版本控制。当您添加或修改类中的任何字段时，已经序列化的类将无法恢复，因为serialVersionUID已为新类生成与旧的序列化对象将不同。Java序列化过程依赖于正确的serialVersionUID恢复序列化对象的状态，并在serialVersionUID不匹配时抛出java.io.InvalidClassException 异常。</p><h2 id="Transient-关键字"><a href="#Transient-关键字" class="headerlink" title="Transient 关键字"></a>Transient 关键字</h2><p>transient修饰符仅适用于变量，不适用于方法和类。在序列化时，如果我们不想序列化特定变量以满足安全约束，那么我们应该将该变量声明为transient。执行序列化时，JVM会忽略transient变量的原始值并将默认值保存到文件中。因此，transient意味着不要序列化。</p><h2 id="Transient-与-Static"><a href="#Transient-与-Static" class="headerlink" title="Transient 与 Static"></a>Transient 与 Static</h2><p>静态变量不是对象状态的一部分，因此它不参与序列化。所以将静态变量声明为transient变量是没有用处的。</p><h2 id="Final-与-Transient"><a href="#Final-与-Transient" class="headerlink" title="Final 与 Transient"></a>Final 与 Transient</h2><p>final变量将直接通过值参与序列化，所以将final变量声明为transient变量不会产生任何影响。现在，让我们考虑一个显示Java中的序列化和反序列化的程序。<br><img src="https://img-blog.csdnimg.cn/20190927150923104.png" alt="在这里插入图片描述"><br>实现 Serializable 接口的 Employee 类：<br><img src="https://img-blog.csdnimg.cn/2019092715100119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190927151014405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面的 SerializingObject 程序实例化一个 Employee 的对象，并将它序列化到文件中。<br><img src="https://img-blog.csdnimg.cn/20190927151041821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面的 DeSerializingObject 程序反序列化 Employee 对象。<br><img src="https://img-blog.csdnimg.cn/20190927151117717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>文章借鉴了好几个大佬的，下面附上原链接：<br><a href="https://baijiahao.baidu.com/s?id=1622011683975285944&wfr=spider&for=pc" target="_blank" rel="noopener">Java程序员：Java中的序列化和反序列化</a><br><a href="https://blog.csdn.net/u013870094/article/details/82765907" target="_blank" rel="noopener">Java 之 Serializable 序列化和反序列化的概念,作用的通俗易懂的解释</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;众所周知，类的对象会随着程序的终止而被垃圾收集器销毁。如果要在不重新创建对象的情况下调用该类，该怎么做？这就可以通过序列化将数据转换为字节流
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>MOCTF misc</title>
    <link href="http://yoursite.com/2020/02/03/MOCTF%20misc/"/>
    <id>http://yoursite.com/2020/02/03/MOCTF%20misc/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:57:52.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-假装安全"><a href="#0x00-假装安全" class="headerlink" title="0x00 假装安全"></a>0x00 假装安全</h1><p>题目给了一个carefully.jpg，用记事本打开发现有flag.txt，于是binwalk一下，<br><img src="https://img-blog.csdnimg.cn/20190816164148407.png" alt="在这里插入图片描述"><br>果然，里面有个zip，其中有个flag.txt，binwalk -e carefully.jpg解压一下，得到一个压缩包和flag.txt，打开flag.txt就可以看到一串像是flag的东西：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mcfCrflyS1eot</span>&#123;<span class="variable">@eul_ld</span>&#125;</span><br></pre></td></tr></table></figure><p>栅栏密码解密，即可得到moctf{C@refully_Sl1de}</p><h1 id="0x01-扫扫出奇迹"><a href="#0x01-扫扫出奇迹" class="headerlink" title="0x01 扫扫出奇迹"></a>0x01 扫扫出奇迹</h1><p>拿到二维码，试着扫一扫，扫不出来，发现是一个取反色的二维码，<br><img src="https://img-blog.csdnimg.cn/20190816165240568.png" alt="在这里插入图片描述"><br>用stegsolve的Xor可以取反色，得到二维码，<br><img src="https://img-blog.csdnimg.cn/20190816165306213.png" alt="在这里插入图片描述"><br>扫一扫得到flag：moctf{qr_code_1s_1n_1t}</p><h1 id="0x02-光阴似箭"><a href="#0x02-光阴似箭" class="headerlink" title="0x02 光阴似箭"></a>0x02 光阴似箭</h1><p>是一个gif动图，用stegsolve的Frame Browser查看，<br><img src="https://img-blog.csdnimg.cn/20190816165531562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>反过来就是moctf{Flash_Movie}</p><h1 id="0x03-杰斯的魔法"><a href="#0x03-杰斯的魔法" class="headerlink" title="0x03 杰斯的魔法"></a>0x03 杰斯的魔法</h1><p>查看源代码，感觉有点像包含flag，试一试，moctf{scr1pt_1s_magical}真的是！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(unescape('%3Cscript%20language%20%3D%20%22javascript%22%3Ealert%28%22moctf%7Bscr1pt_1s_magical%7D%22%29%3B%3C/script%3E'));</span><br></pre></td></tr></table></figure><p>当然在线url解码也可以！<br><img src="https://img-blog.csdnimg.cn/20190816170203192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x04-流量分析"><a href="#0x04-流量分析" class="headerlink" title="0x04 流量分析"></a>0x04 流量分析</h1><p>是一个pcapng文件，用wireshark打开，利用分析中的追踪流量进行分析发现flag<br><img src="https://img-blog.csdnimg.cn/20190816173300375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">即可得到moctf{c@N_y0U_4lnd_m8}。</p><h1 id="0x05-女神的告白"><a href="#0x05-女神的告白" class="headerlink" title="0x05 女神的告白"></a>0x05 女神的告白</h1><p>解压需要密码，提示说压缩包密码是以meimei开头，利用ARCHPR直接掩码攻击，设置好掩码，后面的位数可以一位一位的试，试到第四位时得到密码。将得到的密码解压文件，获取flag：moctf{Y0u_@re_A_g00d_man}<br>（ARCHPR 4.54破解版可以帮助你破解密码，它可以恢复保护口令或将用所有流行的档案版本创建的加密 ZIP 和 RAR 档案解除锁定。）<br><img src="https://img-blog.csdnimg.cn/20190816182614968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-假装安全&quot;&gt;&lt;a href=&quot;#0x00-假装安全&quot; class=&quot;headerlink&quot; title=&quot;0x00 假装安全&quot;&gt;&lt;/a&gt;0x00 假装安全&lt;/h1&gt;&lt;p&gt;题目给了一个carefully.jpg，用记事本打开发现有flag.txt，于是bi
      
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>Referer</title>
    <link href="http://yoursite.com/2020/02/03/Referer/"/>
    <id>http://yoursite.com/2020/02/03/Referer/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:58:15.040Z</updated>
    
    <content type="html"><![CDATA[<p><strong>HTTP Referer</strong>是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p><h2 id="Referer的作用"><a href="#Referer的作用" class="headerlink" title="Referer的作用"></a>Referer的作用</h2><p>1.防盗链<br>我在<code>www.google.com</code>里有一个<code>www.baidu.com</code>链接，那么点击这个   <code>www.baidu.com</code>，它的header信息里就有：</p><pre><code>Referer=http://www.google.com</code></pre><p>那么可以利用这个来防止盗链了，比如我只允许我自己的网站访问我自己的图片服务器，那我的域名是<strong><strong>，那么图片服务器每次取到Referer来判断一下是不是我自己的域名</strong></strong>，如果是就继续访问，不是就拦截。<br>还有将这个http请求发给服务器后，如果服务器要求必须是某个地址或者某几个地址才能访问，而你发送的referer不符合他的要求，就会拦截或者跳转到他要求的地址，然后再通过这个地址进行访问。</p><p>2.防止恶意请求。<br>比如静态请求是<em>.html结尾的，动态请求是</em>.shtml，那么由此可以这么用，所有的*.shtml请求，必须 Referer  为我自己的网站。</p><pre><code>Referer=http://www.google.com</code></pre><h2 id="空Referer"><a href="#空Referer" class="headerlink" title="空Referer"></a>空Referer</h2><p> 空Referer即，Referer  头部的内容为空，或者，一个 HTTP  请求中根本不包含 Referer 头部。根据Referer的定义，它的作用是指示一个请求是从哪里链接过来，那么当一个<em>请求并不是由链接触发产生的</em>，那么自然也就不需要指定这个请求的链接来源。<br>比如，直接在浏览器的地址栏中输入一个资源的URL地址，那么这种请求是不会包含 Referer  字段的，因为这是一个“凭空产生”的 HTTP  请求，并不是从一个地方链接过去的。<br>允许 Referer  为空，意味着你允许比如浏览器直接访问，就是空。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;HTTP Referer&lt;/strong&gt;是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HT
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="http://yoursite.com/2020/02/03/Cookie/"/>
    <id>http://yoursite.com/2020/02/03/Cookie/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:56:12.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><blockquote><p>Cookie 可以翻译为“小甜品，小饼干” ，Cookie 在网络系统中几乎无 处不在，当我们浏览以前访问过的网站时，网页中可能会出现<br>：你好 XXX，这会让我们感觉很亲切，就好像吃了一个小甜品一样。这其实是通过访问主机中的一个文件来实现的，这个文件就是 Cookie。</p></blockquote><p>在 Internet 中，Cookie 实际上是指<strong>小量信息，是由 Web 服务器创建的，将信息存储在用户计算机上的文本文件</strong>。Web服务器用HTTP标头将cookie发送到客户端。在客户端终端，浏览器解析cookie并将其保存为本地文件，该文件自动将来自同一服务器的任何请求绑定到这些cookie。一般网络用户习惯用其复数形式 Cookies。</p><blockquote><p>在计算机中，Cookie 是存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM<br>（随机存取存储器，也叫主存，是与CPU直接交换数据的内部存储器，可以随时读写（刷新时除外），而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储介质。主存即计算机内部最主要的存储器，用来加载各式各样的程序与数据，以供CPU直接运行与运用。）中发挥作用<br>（此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬盘上<br>（此种 Cookies 称作 Persistent Cookies）。 通常情况下，当用户结束浏览器会话时，系统将终止所有的<br>Cookie。当 Web 服务器创建了Cookies 后，只要在其有效期内，当用户访问同一个 Web<br>服务器时，浏览器首先要检查本地的Cookies，并将其原样发送给 Web 服务器。这种状态信息称作“Persistent Client<br>State HTTP Cookie” ，简称为 Cookies。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191012084153470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过扩展HTTP协议来实现正统cookie分发。服务器通过向HTTP响应头添加特殊指示来提示浏览器生成cookie。纯JavaScript等客户端也可以产生cookie。根据某些原则，浏览器在后台自动发送cookie给服务器，浏览器检查所有的cookie，如果cookie声明范围大于或等于要请求的资源的位置，cookie将添加到请求资源的HTTP标头发送到服务器。</p><p>cookie的内容主要包括：名称，值，到期时间，路径和域。路径与域一起构成了cookie的范围。<br>如果未设置到期时间，则表示此cookie的生命周期是在浏览器会话期间，浏览器窗口关闭，并且cookie消失。<br>生命周期为浏览器会话的cookie称为会话cookie。会话cookie通常不存储在硬盘上，而是存储在内存中。当然，这种行为不受监管。如果设置了到期时间，浏览器会将cookie保存到硬盘，关闭它并再次打开浏览器。在超过设定的到期时间之前，这些cookie仍然有效。存储在硬盘上的Cookie可以在不同的浏览器进程之间共享，例如两个IE窗口。<br>不同的浏览器对存储在内存中的cookie有不同的处理方法。<br>对于IE，在一个打开的窗口上按Ctrl-N（或者从文件菜单）打开的窗口可以与原窗口共享，而使用其他方式新开的IE进程则不能共享已经打开的窗口的内存cookie；对于Mozilla Firefox0.8，所有的进程和标签页都可以共享同样的cookie。一般来说是用javascript的window.open打开的窗口会与原窗口共享内存cookie。浏览器对于会话cookie的这种只认cookie不认人的处理方式经常给采用session机制的web应用程序开发者造成很大的困扰。<br>会话机制使用维护服务器端状态的解决方案。同时，我们也看到，由于服务器端状态保存方案还需要在客户端保存标识符，会话机制可能需要使用cookie机制来达到保存标识符的目的。会话提供了一种管理全局变量的便捷方法。</p><p>该会话适用于每个用户。变量的值存储在服务器上。 sessionID用于区分使用哪个用户会话变量。当用户访问浏览器时，该值将返回给服务器。当客户端禁用cookie时，此值也可以设置为通过get返回给服务器。</p><p>下面就是一个goolge设置cookie的响应头的例子 :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Found </span><br><span class="line">   Location: http://www.google.com/intl/zh-CN/ </span><br><span class="line">   Set-Cookie: PREF=ID=<span class="number">0565</span>f77e132de138:NW=<span class="number">1</span>:TM=<span class="number">1098082649</span>:LM=<span class="number">1098082649</span>:S=KaeaCFPo49RiA_d8; </span><br><span class="line">   expires=Sun, <span class="number">17</span>-Jan<span class="number">-2038</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">07</span> GMT; path=/; domain=.google.com </span><br><span class="line">   Content-Type: text/html</span><br></pre></td></tr></table></figure><p>在安全性方面：当您访问使用会话并在您自己的计算机上创建cookie的站点时，建议服务器端的会话机制更安全，因为它不会任意读取客户端存储的信息。</p><p>文章参照了下面两篇文章，可以好好学习一下。<br><a href="https://baijiahao.baidu.com/s?id=1612804856429135825&wfr=spider&for=pc" target="_blank" rel="noopener">官方解析cookies和session的区别</a><br><a href="https://www.cnblogs.com/wangpei/p/4884840.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangpei/p/4884840.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Cookie 可以翻译为“小甜品，小饼干” ，Cookie 在网络系统中几乎无 处
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>robots协议</title>
    <link href="http://yoursite.com/2020/02/03/robots%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/02/03/robots%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:58:36.241Z</updated>
    
    <content type="html"><![CDATA[<p>晚上刷ctf时，做到一题，关于robots的，作为小白的我，丝毫不会，就查了一下。</p><p>robots.txt文件是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它 。robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。当 一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>点开网址什么都没有，看教程说要用dirsearch扫目录脚本，又百度了一下。。。</p><p>dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。</p><p>在kali中用以下命令即可使用：(kali中自带python环境）<br>git clone <a href="https://github.com/maurosoria/dirsearch.git" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch.git</a><br>cd dirsearch/<br>./dirsearch.py -u 目标网址 -e *<br>果然扫到了robots.txt，emmm，尴尬的是，不会访问该文件，后来大神指点，在网址链接后面加上robots.txt即可访问，表示学到了，?终于得到了flag.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;晚上刷ctf时，做到一题，关于robots的，作为小白的我，丝毫不会，就查了一下。&lt;/p&gt;
&lt;p&gt;robots.txt文件是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它 。robots.txt是一个协议，而不是一
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://yoursite.com/2020/02/03/XSS/"/>
    <id>http://yoursite.com/2020/02/03/XSS/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:59:23.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>跨站脚本攻击（Cross Cite Scripting），它是通过<strong>对网页注入可执行代码（通常是JavaScript代码）且成功地被浏览器执行</strong>，达到攻击的目的，形成了一次有效XSS攻击。一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，黑客可以利用xss盗取用户的cookie，有了用户的cookie，可以以用户的身份来正常访问站点。有时候还和其他攻击方式同时实施，比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨大的。为了不和层叠样式表（Cascading Style Sheets，CSS）混淆，就把跨站脚本攻击缩写为XSS。<br>XSS分为反射型、存储型、DOM型。反射型一般出现在url中，提交给服务器，然后服务器返回，会在页面渲染过程中引发XSS。存储型，提交的数据存储在服务器端，下次访问页面时还会触发XSS，因此相对于另外两个，危害性大一些。DOM型不会经过服务器端，只是放在客户端。也有人将其分为持久型和非持久型，持久型就是存储型，非持久型就是反射型。<br>具体详细内容看大佬博客吧(<a href="https://blog.csdn.net/extremebingo/article/details/81176394" target="_blank" rel="noopener">https://blog.csdn.net/extremebingo/article/details/81176394</a>)<br>小白学习中~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;p&gt;跨站脚本攻击（Cross Cite Scripting），它是通过&lt;strong&gt;对网页注入可执行代码（通常是JavaScript代
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>你知道HTTP请求头有哪些吗？</title>
    <link href="http://yoursite.com/2020/02/03/%E4%BD%A0%E7%9F%A5%E9%81%93http%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B9%88%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/02/03/%E4%BD%A0%E7%9F%A5%E9%81%93http%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B9%88%EF%BC%9F/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:59:48.587Z</updated>
    
    <content type="html"><![CDATA[<p>好久没刷题了，今天竟然发现自己傻了，连http请求头都不太清楚了，凉了凉了，赶紧百度一波，然后记下来，下次不能再忘了，下面是转载大佬的文章。</p><h1 id="http请求头组成"><a href="#http请求头组成" class="headerlink" title="http请求头组成"></a>http请求头组成</h1><p> HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。HTTP的头信息包括通用头、请求头、响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。</p><p>分别来解释一下这四部分是什么意思吧！</p><pre><code>通用头标：即可用于请求，也可用于响应，是作为一个整体而不是特定资源与事务相关联。请求头标：允许客户端传递关于自身的信息和希望的响应形式。响应头标：服务器和于传递自身信息的响应。实体头标：定义被传送资源的信息。即可用于请求，也可用于响应。</code></pre><p>根据上面的分类我们可以把他们分为:Request和Response两部分。</p><h2 id="HTTP-Request-Header-请求头"><a href="#HTTP-Request-Header-请求头" class="headerlink" title="HTTP Request Header 请求头"></a>HTTP Request Header 请求头</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Accept：指定客户端能够接收的内容类型。</span><br><span class="line"></span><br><span class="line">Accept-Charset：浏览器可以接受的字符编码集。</span><br><span class="line"></span><br><span class="line">Accept-Encoding：指定浏览器可以支持的web服务器返回内容压缩编码类型。</span><br><span class="line"></span><br><span class="line">Accept-Language：浏览器可接受的语言。</span><br><span class="line"></span><br><span class="line">Accept-Ranges：可以请求网页实体的一个或者多个子范围字段。</span><br><span class="line"></span><br><span class="line">AuthorizationHTTP：授权的授权证书。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Cache</span>-Control：指定请求和响应遵循的缓存机制。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Connection</span>：表示是否需要持久连接。（<span class="keyword">HTTP</span> <span class="number">1.1</span>默认进行持久连接）</span><br><span class="line"></span><br><span class="line">CookieHTTP：请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Length</span>：请求的内容长度。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Type</span>：请求的与实体对应的MIME信息。</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>：请求发送的日期和时间。</span><br><span class="line"></span><br><span class="line">Expect：请求的特定的服务器行为。</span><br><span class="line"></span><br><span class="line"><span class="keyword">From</span>：发出请求的用户的Email。</span><br><span class="line"></span><br><span class="line">Host：指定请求的服务器的域名和端口号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span>-<span class="keyword">Match</span>：只有请求内容与实体相匹配才有效。</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span>-Modified-Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回<span class="number">304</span>代码。</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span>-<span class="keyword">None</span>-<span class="keyword">Match</span>：如果内容未改变返回<span class="number">304</span>代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变。</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span>-<span class="keyword">Range</span>：如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span>-Unmodified-Since：只在实体在指定时间之后未被修改才请求成功。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Max</span>-Forwards：限制信息通过代理和网关传送的时间。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Pragma</span>：用来包含实现特定的指令。</span><br><span class="line"></span><br><span class="line">Proxy-Authorization：连接到代理的授权证书。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Range</span>：只请求实体的一部分，指定范围。</span><br><span class="line"></span><br><span class="line">Referer：先前网页的地址，当前请求网页紧随其后,即来路。</span><br><span class="line"></span><br><span class="line">TE：客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Upgrade</span>：向服务器指定某种传输协议以便服务器进行转换（如果支持。</span><br><span class="line"></span><br><span class="line"><span class="keyword">User</span>-AgentUser-<span class="keyword">Agent</span>：的内容包含发出请求的用户信息。</span><br><span class="line"></span><br><span class="line">Via：通知中间网关或代理服务器地址，通信协议。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Warning</span>：关于消息实体的警告信息</span><br></pre></td></tr></table></figure><h2 id="HTTP-Responses-Header-响应头"><a href="#HTTP-Responses-Header-响应头" class="headerlink" title="HTTP Responses Header 响应头"></a>HTTP Responses Header 响应头</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges：表明服务器是否支持指定范围请求及哪种类型的分段请求。</span><br><span class="line"></span><br><span class="line">Age：从原始服务器到代理缓存形成的估算时间（以秒计，非负）。</span><br><span class="line"></span><br><span class="line">Allow：对某网络资源的有效的请求行为，不允许则返回405。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Cache</span>-Control：告诉所有的缓存机制是否可以缓存及哪种类型。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-Encodingweb：服务器支持的返回内容压缩编码类型。。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Language</span>：响应体的语言。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Length</span>：响应体的长度。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-Location：请求资源可替代的备用的另一地址。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">MD5</span>：返回资源的<span class="keyword">MD5</span>校验值。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Range</span>：在整个返回体中本部分的字节位置。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Type</span>：返回内容的MIME类型。</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>：原始服务器消息发出的时间。</span><br><span class="line"></span><br><span class="line">ETag：请求变量的实体标签的当前值。</span><br><span class="line"></span><br><span class="line">Expires：响应过期的日期和时间。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Last</span>-Modified：请求资源的最后修改时间。</span><br><span class="line"></span><br><span class="line">Location：用来重定向接收方到非请求<span class="keyword">URL</span>的位置来完成请求或标识新的资源。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Pragma</span>：包括实现特定的指令，它可应用到响应链上的任何接收方。</span><br><span class="line"></span><br><span class="line">Proxy-Authenticate：它指出认证方案和可应用到代理的该<span class="keyword">URL</span>上的参数。</span><br><span class="line"></span><br><span class="line"><span class="keyword">refresh</span>：应用于重定向或一个新的资源被创造，在<span class="number">5</span>秒之后重定向（由网景提出，被大部分浏览器支持）</span><br><span class="line"></span><br><span class="line">Retry-<span class="keyword">After</span>：如果实体暂时不可取，通知客户端在指定时间之后再次尝试。</span><br><span class="line"></span><br><span class="line">Serverweb：服务器软件名称。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span>-Cookie：设置<span class="keyword">Http</span> Cookie。</span><br><span class="line"></span><br><span class="line">Trailer：指出头域在分块传输编码的尾部存在。</span><br><span class="line"></span><br><span class="line">Transfer-<span class="keyword">Encoding</span>：文件传输编码。</span><br><span class="line"></span><br><span class="line">Vary：告诉下游代理是使用缓存响应还是从原始服务器请求。</span><br><span class="line"></span><br><span class="line">Via：告知代理客户端响应是通过哪里发送的。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Warning</span>：警告实体可能存在的问题。</span><br><span class="line"></span><br><span class="line">WWW-Authenticate：表明客户端请求实体应该使用的授权方案。</span><br></pre></td></tr></table></figure><p>附上原文链接：<br><a href="https://www.jianshu.com/p/60063b692a3f" target="_blank" rel="noopener">https://www.jianshu.com/p/60063b692a3f</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没刷题了，今天竟然发现自己傻了，连http请求头都不太清楚了，凉了凉了，赶紧百度一波，然后记下来，下次不能再忘了，下面是转载大佬的文章。&lt;/p&gt;
&lt;h1 id=&quot;http请求头组成&quot;&gt;&lt;a href=&quot;#http请求头组成&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="http://yoursite.com/2020/02/03/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/02/03/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:58:50.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-SQL注入概述"><a href="#0x00-SQL注入概述" class="headerlink" title="0x00 SQL注入概述"></a>0x00 SQL注入概述</h1><h2 id="什么是SQL注入漏洞"><a href="#什么是SQL注入漏洞" class="headerlink" title="什么是SQL注入漏洞"></a>什么是SQL注入漏洞</h2><p>攻击者利用Web应用程序对用户输入验证上的疏忽，在输入的数据包中包含对某些数据库具有特殊意义的符号和命令，让攻击者有机会直接对后台数据库下达命令，进而入侵后台数据库乃至整个应用系统。</p><h2 id="主流的数据库"><a href="#主流的数据库" class="headerlink" title="主流的数据库"></a>主流的数据库</h2><p><img src="https://img-blog.csdnimg.cn/20191012091108121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h2><p>SQL注入攻击的本质，服务端没有过滤用户输入的恶意数据，直接把它当成SQL命令来执行了，从而影响数据库安全和平台安全。</p><h2 id="两个条件"><a href="#两个条件" class="headerlink" title="两个条件"></a>两个条件</h2><ul><li>用户能够控制输入；</li><li>原本程序要执行的SQL语句，拼接了用户输入的恶意数据。<h2 id="导致的危害"><a href="#导致的危害" class="headerlink" title="导致的危害"></a>导致的危害</h2></li><li>绕过登录验证：使用万能密码登录网站后台等</li><li>获取敏感数据：获取网站管理员账号、密码等</li><li>文件系统操作：列目录，读取、写入文件等</li><li>注册表操作：读取、写入、删除注册表等</li><li>执行系统命令：远程执行命令<h2 id="造成的原因"><a href="#造成的原因" class="headerlink" title="造成的原因"></a>造成的原因</h2><h4 id="（1）动态字符串构建引起"><a href="#（1）动态字符串构建引起" class="headerlink" title="（1）动态字符串构建引起"></a>（1）动态字符串构建引起</h4></li><li>不正确的处理转义字符（宽字节注入）</li><li>不正确的处理类型（报错泄露信息）  </li><li>不正确的处理联合查询 </li><li>不正确的处理错误（报错信息泄露） </li><li>不正确的处理多次提交（二次注入）</li></ul><h4 id="（2）后台存在的问题"><a href="#（2）后台存在的问题" class="headerlink" title="（2）后台存在的问题"></a>（2）后台存在的问题</h4><ul><li><p>后台无过滤或者编码用户数据</p></li><li><p>数据库可以拼接用户传递的恶意代码</p><h4 id="（3）错误处理不当"><a href="#（3）错误处理不当" class="headerlink" title="（3）错误处理不当"></a>（3）错误处理不当</h4></li><li><p>详细的内部错误消息显示给用户或攻击者</p></li><li><p>错误信息可以直接给攻击者提供下一步攻击帮助</p><h4 id="（4）不安全的数据库配置"><a href="#（4）不安全的数据库配置" class="headerlink" title="（4）不安全的数据库配置"></a>（4）不安全的数据库配置</h4></li><li><input disabled="" type="checkbox"> <p>默认账户<br>SQL Server “sa”作为数据库系统管理员账户<br>MySQL使用”root”和”anonymous”用户账户<br>Oracle在创建数据库时通常默认会创建SYS、SYSTEMS DBSNMP和OUTLN账户</p></li><li><input disabled="" type="checkbox"> <p>权限<br>问题：系统和数据库管理员在安装数据库服务器时允许以roots SYSTEM或Administrator特权系统用户账户身份执行操作。<br>正确方法：应该始终以普通用户身份运行服务器上的服务，降低用户权限，将用户权限仅限于本服务</p><h2 id="SQL注入方法"><a href="#SQL注入方法" class="headerlink" title="SQL注入方法"></a>SQL注入方法</h2></li><li><input disabled="" type="checkbox"> <p>自动化注入工具</p><ol><li>SQL注入工具<br>Sqlmap   Havij   Sqlid</li><li>ASP/JSP注入工具<br>NBSI   阿D注入软件   明小子注入软件</li><li>PHP注入工具<br>穿山甲注入软件    海阳顶端注入软件</li></ol></li><li><input disabled="" type="checkbox"> <p>手工注入过程</p><ol><li>判断是否存在注入点</li><li>判断字段长度</li><li>判断字段回显位置</li><li>判断数据库信息</li><li>查找数据库名</li><li>查找数据库表</li><li>查找数据库表中所有字段以及字段值</li><li>猜解账号密码</li><li>登录管理员后台</li></ol></li></ul><p>—————————————————————————————————</p><h1 id="0x01-SQL注入技术"><a href="#0x01-SQL注入技术" class="headerlink" title="0x01 SQL注入技术"></a>0x01 SQL注入技术</h1><p>（1）常见SQL语法</p><ul><li><input disabled="" type="checkbox"> 用于与关系型数据库交互的标准SQL命令有：<br>Create、Select、Insert、Update、Delete 和 Drop</li><li><input disabled="" type="checkbox"> 分为三组：<ol><li>数据定义（Create、Drop）</li><li>数据操纵（Select、Insert、Update、Delete）</li><li>数据控制（Grant、Revoke）</li></ol></li></ul><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>CREATE</td><td>创建新的表、视图或其他数据库中的对象</td></tr><tr><td>ALTER</td><td>修改现存数据库对象，比如一张表</td></tr><tr><td>DROP</td><td>删除表、视图或数据库中的其他对象</td></tr><tr><td></td><td></td></tr><tr><td>SELECT</td><td>从一张或多张表中检索特定的数据</td></tr><tr><td>INSERT</td><td>创建一条新纪录</td></tr><tr><td>UPDATE</td><td>修改记录</td></tr><tr><td>DELETE</td><td>删除记录</td></tr><tr><td></td><td></td></tr><tr><td>GRANT</td><td>赋予用户特权</td></tr><tr><td>REVOKE</td><td>收回赋予用户的特权</td></tr></tbody></table><ul><li><input disabled="" type="checkbox"> SQL高级操作：排序、分组、限定条数</li></ul><p>排序Order by</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test_table ORDER BY userid;</span><br></pre></td></tr></table></figure><p>分组Group by</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,count(*) FROM test_table GROUP BY name;</span><br></pre></td></tr></table></figure><p>限定条数limit</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test_table limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">SELECT * FROM test_table limit <span class="number">1</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>组合使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM test_table LIMIT <span class="number">0</span>,<span class="number">5</span> ORDER BY userid;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <p>SQL高级操作：联合查询union：<br><img src="https://img-blog.csdnimg.cn/20191015085021731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为查询语句构造问题，可直接否认掉之前的查询，执行一个全新的查询语句，查询的列应当与之前的列对应。</p></li><li><input disabled="" type="checkbox"> <p>SQL高级操作：结合其他函数操作：<br>在MySQL中，把information_schema（MySQL自带的）看作是一个信息数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。<br>information_schema.SCHEMATA表中的SCHEMA_NAME查看所有的数据库：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> hehe where id=<span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span>=<span class="number">2</span> union select <span class="number">0</span>,<span class="number">0</span> SCHEMA_NAME <span class="keyword">from</span> information_schema.SCHEMATA limit <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><p>（2）万能密码绕过登录</p><p>通过在用户名处传入参数 ‘ or 1=1 # 进行万能密码登录。<br>SELECT username, password FROM users WHERE username=’textvalue’ or 1=1 # ‘ AND password=’textvalue2’</p><ul><li><input disabled="" type="checkbox"> 输入字符<br>formusr = ‘ or 1=1 - -<br>formpwd = anything</li><li><input disabled="" type="checkbox"> 实际的查询代码<br>SELECT * FROM users WHERE username=’ ‘ or 1=1 - - AND password= ‘anything’</li></ul><p>（3）数字型注入</p><ul><li><input disabled="" type="checkbox"> 输入的参数为<strong>整数</strong>，如ID、年龄、页码等，如果存在注入型漏洞，则为数字型注入。<br><a href="http://www.testweb.com/user.php?id=8" target="_blank" rel="noopener">http://www.testweb.com/user.php?id=8</a></li><li><input disabled="" type="checkbox"> 存在数字型注入测试方法</li></ul><table><thead><tr><th><a href="http://www.testweb.com/user.php?id=8‘" target="_blank" rel="noopener">http://www.testweb.com/user.php?id=8‘</a></th><th>返回错误，未对单引号做处理</th></tr></thead><tbody><tr><td><a href="http://www.testweb.com/user.php?id=8" target="_blank" rel="noopener">http://www.testweb.com/user.php?id=8</a> and 1=1</td><td>运行正常</td></tr><tr><td><a href="http://www.testweb.com/user.php?id=8" target="_blank" rel="noopener">http://www.testweb.com/user.php?id=8</a> and 1=2</td><td>运行异常</td></tr></tbody></table><p>（4）字符型注入</p><ul><li><input disabled="" type="checkbox"> <p>输入的参数为字符串<br>与数组型注入的区别在于：字符型注入一般要用单引号或双引号等来闭合<br><a href="http://www.testweb.com/user.php?user=admin&#39;" target="_blank" rel="noopener">http://www.testweb.com/user.php?user=admin&#39;</a></p></li><li><input disabled="" type="checkbox"> <p>存在字符型注入测试方法</p></li></ul><table><thead><tr><th><a href="http://www.testweb.com/user.php?id=8‘" target="_blank" rel="noopener">http://www.testweb.com/user.php?id=8‘</a></th><th>返回错误</th></tr></thead><tbody><tr><td><a href="http://www.testweb.com/user.php?user=admin&#39;" target="_blank" rel="noopener">http://www.testweb.com/user.php?user=admin&#39;</a> and ‘1’=’1</td><td>运行正常</td></tr><tr><td><a href="http://www.testweb.com/user.php?user=admin&#39;" target="_blank" rel="noopener">http://www.testweb.com/user.php?user=admin&#39;</a> and ‘1’=’2</td><td>运行异常</td></tr></tbody></table><p>（5）SQL盲注<br>SQL盲注是不能通过直接显示的途径来获取数据库数据的方法。</p><p>在盲注中，攻击者根据返回页面的不同来判断信息（可能是页面内容不同，也可以是响应时间不同）。一般情况下，盲注分为三种：</p><ul><li>布尔盲注<br>某些查询语句是不需要返回结果的，仅判断查询语句是否正确执行即可，所以其返回值可以看作一个布尔值，正常时显示true，报错或不正常显示false。<br>查询语句：<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT userid FROM member WHERE u_name=$name AND u_pass= $<span class="keyword">pass</span>;</span><br></pre></td></tr></table></figure></li></ul><p>注入语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=-1' and (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'a'</span></span><br><span class="line"><span class="keyword">name</span>=<span class="number">-1</span><span class="string">' and (select mid(u_name,2,1) from member where userid=1)='</span>d<span class="string">'</span></span><br><span class="line"><span class="string">name=-1'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">3</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'m'</span></span><br><span class="line"><span class="keyword">name</span>=<span class="number">-1</span><span class="string">' and (select mid(u_name,4,1) from member where userid=1)='</span>i<span class="string">'</span></span><br><span class="line"><span class="string">name=-1'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">5</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'n'</span></span><br></pre></td></tr></table></figure><ul><li>时间盲注<br>某些查询语句是不需要返回结果的，仅判断查询语句是否正确执行即可，但是由于某些限制，布尔盲注的关键字符代入不进去，这时候就可以利用sleep()函数来进行时间盲注，取页面执行时间（结束时间-开始时间）来判断sleep()函数是否正常执行，所以其是否正常执行可以看作一个布尔值，正常时显示true，报错或不正常显示false。</li></ul><p>查询语句：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT userid FROM member WHERE u_name=$name AND u_pass= $<span class="keyword">pass</span>;</span><br></pre></td></tr></table></figure><p>注入语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=-1' and (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'a'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">name</span>=<span class="number">-1</span><span class="string">' and (select mid(u_name,2,1) from member where userid=1)='</span>d<span class="string">' and (select sleep(3))</span></span><br><span class="line"><span class="string">name=-1'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">3</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'m'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">name</span>=<span class="number">-1</span><span class="string">' and (select mid(u_name,4,1) from member where userid=1)='</span>i<span class="string">' and (select sleep(3))</span></span><br><span class="line"><span class="string">name=-1'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">mid</span>(u_name,<span class="number">5</span>,<span class="number">1</span>) <span class="keyword">from</span> <span class="keyword">member</span> <span class="keyword">where</span> userid=<span class="number">1</span>)=<span class="string">'n'</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">sleep</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>基于时间的盲注在使用延迟函数上可以有两个选择：<br>（1）BENCHMARK(count,expr)函数        //将expr语句执行count次来延迟时间<br>（2）sleep(time)函数        //直接延迟time时间</p><ul><li>报错型盲注<br>正确时浏览器返回”You are in ……..”，错误会有报错语句。</li></ul><p>（6）SQL文件头注入<br>HTTP Header内容：</p><ul><li>User-Agent：使得服务器可以识别客户使用的操作系统，浏览器版本等（很多客户量大的网站会记录客户使用的操作系统或浏览器版本等存入数据库中）</li><li>Cookie：网站为了辨别用户身份、进行session追踪而储存在用户本地终端上的数据（通常经过加密）</li><li>X-Forwarded-For：简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP（通常一些网站的防注入功能可能会记录请求端真实IP并写入数据库 or 某文件中【通过修改XFF头可以实现伪造IP】</li><li>Clien-IP：同上</li><li>Referer：浏览器告诉WEB服务器我是从哪个页面链接过来的</li><li>Host：客户端指定自己想访问的WEB服务器的域名/IP地址和端口号</li></ul><p>常见的HTTP Header注入类型：</p><ul><li>Cookie注入</li><li>Referer注入</li><li>UA注入</li><li>XFF注入</li></ul><p>（7）宽字节注入<br>统一国际规范的理想：程序都使用unicode编码，所有的网站都使用utf-8编码。</p><p>国内及国外（特别是非英语国家）的一些cms，仍然使用自己国家的一套编码方式，比如gbk，作为自己的默认编码类型。也有一些cms为了照顾老用户，出了gbk和utf-8两个版本。</p><p>一个gbk编码汉字，占2个字节，一个utf-8编码汉字，占3个字节。简体中文系统中ANSI就代表是GBK。</p><p>我们通常使用单引号来探测是否有SQL注入，但我们有可能在前面使用了转义函数，导致输入id=1’ 变成了 id=1\‘ ，探测失效了。<br>于是，输入id=1%df’ ，会变成 id=1%df\‘ ，url编码就是id=1%df%5c%27，gbk是多字节编码，任务两个字节代表一个汉字，所以%df和后面的\也就是%5c变成了一个汉字，而 ‘ 逃逸出来，可以进行SQL注入探测。<br><img src="https://img-blog.csdnimg.cn/2019101507260121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>———————————————————————————————————</p><h1 id="0x02-SQL注入检测绕过"><a href="#0x02-SQL注入检测绕过" class="headerlink" title="0x02 SQL注入检测绕过"></a>0x02 SQL注入检测绕过</h1><ol><li>大小写绕过<br>比如拦截了union，那就使用Union UnloN等等。</li><li>编码绕过<br>WAF检测关键字，比如检测union，用%55也就是U的16进制编码来代替U，union写成%55nloN，结合大小写也可以绕过一些WAF。</li><li>注释绕过<br>适用于WAF只是过滤了一次危险的语句，而没有阻断我们整个的查询</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1+union+select+1,2,3&#x2F;*</span><br></pre></td></tr></table></figure><p>对于上面这条语句，WAF过滤了一次union和select，在之前再写一个注释语句，让他把注释里面的过滤掉，并不影响我们的查询。</p><p>绕过语句就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1&#x2F;*union*&#x2F;union&#x2F;*select*&#x2F;select+1,2,3&#x2F;*</span><br></pre></td></tr></table></figure><ol start="4"><li>分隔重写绕过<br>适用于那种WAF使用了正则表达式的情况，会检测所有的敏感字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1+un&#x2F;**&#x2F;ion+sel&#x2F;**&#x2F;elct+1,2,3-</span><br></pre></td></tr></table></figure>至于重写绕过，适用于WAF过滤了一次的情况，和我们上传aaspsp马的原理一样，我们可以写出类似Ununionion这样的，过滤了一次union就会执行我们的查询了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?id&#x3D;1 Ununionion select 1,2,3-</span><br></pre></td></tr></table></figure><ol start="5"><li>同功能函数转换<br>Substring()函数可以用mid()和substr()这些函数来替换，都是用来取字符串的某一位字符的。<br>Ascii()编码可以用hex()，bin()也就是16进制，二进制编码转换。<br>时间盲注Benchmark()也可以用sleep()来替换。</li></ol><p>sqlmap中有一个tamper目录，主要存放的是waf绕过脚本，比如：base64encode.py，between.py，greatest.py等。<br><img src="https://img-blog.csdnimg.cn/2019101508105169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><input disabled="" type="checkbox"> <p>等号被过滤了—-&gt;<a href="">[equaltolike.py]</a>—-&gt;like代替等号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: SELECT * FROM users WHERE **id=<span class="number">1</span>**</span><br><span class="line">Output: SELECT * FROM users WHERE **id LIKE <span class="number">1</span>**</span><br></pre></td></tr></table></figure></li><li><input disabled="" type="checkbox"> <p>替换字符和单引号被过滤—-&gt;<a href="">[apostrophenullencode.py]</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">(<span class="string">"1 AND '1'='1"</span>)</span><br><span class="line"><span class="string">"1 AND %00%271%00%27=%00%271"</span></span><br></pre></td></tr></table></figure></li></ul><p>———————————————————————————————————</p><h1 id="0x03-SQL注入的防护策略"><a href="#0x03-SQL注入的防护策略" class="headerlink" title="0x03 SQL注入的防护策略"></a>0x03 SQL注入的防护策略</h1><ul><li><input disabled="" type="checkbox"> 使用参数化查询，检查变量数据类型和格式</li></ul><p>SQL注入因为要操作数据库，所以一般会查找SQL语句关键字：insert,delete,update,select，查看传递的变量参数是否为用户可控，有无做过安全处理</p><ul><li><input disabled="" type="checkbox"> 采用sql语句预编译和绑定变量</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">"select id,no from user where id=?"</span>;</span><br><span class="line">PreparedStatement ps =conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br><span class="line">ps.executeQuery();</span><br></pre></td></tr></table></figure><p>采用了PreparedStatement，将sql语句<code>&quot;select id,no from user where id=?&quot;</code>预先编译好，即SQL引擎会先进行语法分析，产生语法树，生成执行计划，这样后面无论你输入什么参数，都不会影响该sql语句的语法结构了。</p><ul><li><input disabled="" type="checkbox"> 不要随意开启生产环境中Webserver的错误显示</li><li><input disabled="" type="checkbox"> 做好数据库账号权限管理</li><li><input disabled="" type="checkbox"> 严格加密处理用户的机密信息</li><li><input disabled="" type="checkbox"> 使用WAF等专业的防护软件系统</li></ul><p>————————————————————<br>以上来自360网络安全学院课程，侵权删~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-SQL注入概述&quot;&gt;&lt;a href=&quot;#0x00-SQL注入概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 SQL注入概述&quot;&gt;&lt;/a&gt;0x00 SQL注入概述&lt;/h1&gt;&lt;h2 id=&quot;什么是SQL注入漏洞&quot;&gt;&lt;a href=&quot;#什么是
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://yoursite.com/2020/02/03/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/02/03/HTTP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T04:57:02.041Z</updated>
    
    <content type="html"><![CDATA[<p>即超文本传输协议，是Web通信时使用的协议，所有WWW文件都必须遵守这个标准。HTTP基于TCP/IP通信协议来传输数据（HTML文件、图片文件、查询结果等）。</p><h1 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h1><p>HTTP协议工作于客户端/服务端（C/S）架构上，浏览器作为HTTP客户端通过URL（统一资源定位符）向HTTP服务端发送所有请求。HTTP使用URL来传输数据和建立连接。<br>Web服务器有：Apache服务器，IIS服务器等。<br>Web服务器根据收到的请求后，向客户端发送响应信息。<br>HTTP默认端口是80，但是也可以改为8080或其他。<br>三点注意事项：</p><ol><li>无连接：无连接的含义是限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li><li>媒体独立：只要客户端和服务器知道如何处理数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li><li>无状态：HTTP协议是无状态协议，无状态是指协议对于事务处理没有记忆能力，缺少状态意味着如果后续处理需要前面的信息，它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol><p>HTTP协议通信流程：<br>Web Server⬅HTTP Protocol➡HTTP Server⬅➡CGI Program⬅➡Database<br>（CGI，通用网关接口，是HTTP服务器与你的或其他机器上的程序进行“交谈”的工具）</p><p>客户端发送到服务器的HTTP请求消息包含以下格式：请求行，请求头部，空行和请求数据四个部分组成。HTTP响应也由四个部分组成：状态行，消息报头，空行和响应正文。</p><h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><ol><li>GET：请求指定的页面信息，并返回实体主体；</li><li>HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头；</li><li>POST：向指定资源提交数据进行数据处理请求（例如提交表单或者上传文件），数据被包含在请求体中。POST请求可能会导致新资源的建立和/或已有的资源的修改；</li><li>PUT：从客户端向服务器传送的数据取代指定的文档的内容；</li><li>DELETE：请求服务器删除指定的页面；</li><li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器；</li><li>OPTIONS：允许客户端查看服务器的性能；</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断；</li><li>PATCH：是对PUT方法的补充，用来对已知资源进行局部更新。<h1 id="HTTP响应头消息"><a href="#HTTP响应头消息" class="headerlink" title="HTTP响应头消息"></a>HTTP响应头消息</h1>应答头     | 说明</li></ol><p>——– | —–<br>Allow  | 服务器支持哪些请求方法（如GET、POST等）。<br>Content-Encoding  | 文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。<br>Content-Length  | 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。<br>Content-Type | 表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。<br>Date  |  当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。<br>Expires | 应该在什么时候认为文档已经过期，从而不再缓存它？<br>Last-Modified  |  文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。<br>Location | 表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。<br>Refresh  |  表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)让浏览器读取指定的页面。" target="_blank" rel="noopener">http://host/path&quot;)让浏览器读取指定的页面。</a> 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。" target="_blank" rel="noopener">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a> 注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。 注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。<br>Server | 服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。<br>Set-Cookie  |  设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。<br>WWW-Authenticate | 客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</p><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>当浏览器访问一个网页时，浏览器会向网页服务器发送请求，当浏览器接收并显示该网页前，服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。<br>常见的HTTP状态码：<br>200：请求成功<br>301：资源（网页等）被永久转移到其他URL（跳转，永久重定向）<br>302：资源暂时转移到其他URL（跳转，暂时重定向，保留旧地址）<br>404：请求的资源不存在<br>500：内部服务器错误<br>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><h2 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a>HTTP状态码分类</h2><p>HTTP状态码分类：<br>分类 | 分类描述<br>—— | ——–<br>1** |    信息，服务器收到请求，需要请求者继续执行操作<br>2** |    成功，操作被成功接收并处理<br>3** |    重定向，需要进一步的操作以完成请求<br>4** |    客户端错误，请求包含语法错误或无法完成请求<br>5** |    服务器错误，服务器在处理请求的过程中发生了错误<br>HTTP状态码列表：<br>状态码 | 状态码英文名称 | 中文描述<br>—— | ———- | —–<br>100 |     Continue    |继续。客户端应继续其请求<br>101 |    Switching Protocols     | 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议<br>200 |    OK    |请求成功。一般用于GET与POST请求<br>201  |    Created    |已创建。成功请求并创建了新的资源<br>202 |    Accepted     | 已接受。已经接受请求，但未处理完成<br>203 | Non-Authoritative Information    | 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br>204  |    No Content    | 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档<br>205    | Reset Content     | 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域<br>206    | Partial Content    | 部分内容。服务器成功处理了部分GET请求<br>300    | Multiple Choices    | 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择<br>301    | Moved Permanently    | 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>302    | Found    | 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI<br>303    | See Other    | 查看其它地址。与301类似。使用GET和POST请求查看<br>304    | Not Modified    | 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源<br>305    | Use Proxy    | 使用代理。所请求的资源必须通过代理访问<br>306    | Unused    | 已经被废弃的HTTP状态码<br>307    | Temporary Redirect    | 临时重定向。与302类似。使用GET请求重定向<br>400    | Bad Request    | 客户端请求的语法错误，服务器无法理解<br>401    | Unauthorized     | 请求要求用户的身份认证<br>402    | Payment Required    | 保留，将来使用<br>403    | Forbidden    | 服务器理解请求客户端的请求，但是拒绝执行此请求<br>404    | Not Found    |服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面<br>405    | Method Not Allowed    | 客户端请求中的方法被禁止<br>406    | Not Acceptable    | 服务器无法根据客户端请求的内容特性完成请求<br>407    | Proxy Authentication Required    | 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权<br>408    | Request Time-out    | 服务器等待客户端发送的请求时间过长，超时<br>409    | Conflict    | 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突<br>410    | Gone    | 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置<br>411    | Length Required    | 服务器无法处理客户端发送的不带Content-Length的请求信息<br>412    | Precondition Failed    | 客户端请求信息的先决条件错误<br>413    | Request Entity Too Large    | 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息<br>414    | Request-URI Too Large    | 请求的URI过长（URI通常为网址），服务器无法处理<br>415    | Unsupported Media Type    | 服务器无法处理请求附带的媒体格式<br>416    |Requested range not satisfiable    | 客户端请求的范围无效<br>417    | Expectation Failed    | 服务器无法满足Expect的请求头信息<br>500    | Internal Server Error    | 服务器内部错误，无法完成请求<br>501    | Not Implemented    | 服务器不支持请求的功能，无法完成请求<br>502    | Bad Gateway    | 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应<br>503    | Service Unavailable    | 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中<br>504    | Gateway Time-out     | 充当网关或代理的服务器，未及时从远端服务器获取请求<br>505    | HTTP Version not supported     | 服务器不支持请求的HTTP协议的版本，无法完成处理</p><h1 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h1><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。<br>HTTP content-type 对照表<br>文件扩展名 |    Content-Type(Mime-Type)    | 文件扩展名    | Content-Type(Mime-Type)<br>——-| ——– | ——- | ——<br>.<em>（ 二进制流，不知道下载文件类型）     | application/octet-stream    | .tif    | image/tiff<br>.001    | application/x-001    |.301    | application/x-301<br>.323    |text/h323    |.906    |application/x-906<br>.907    |drawing/907    |.a11    | application/x-a11<br>.acp    |audio/x-mei-aac    |.ai    |application/postscript<br>.aif    |audio/aiff  |.aifc    |audio/aiff<br>.aiff    |audio/aiff    |.anv    |application/x-anv<br>.asa    |text/asa    |.asf    |video/x-ms-asf<br>.asp    |text/asp    |.asx    |video/x-ms-asf<br>.au    |audio/basic    |.avi    |video/avi<br>.awf    |application/vnd.adobe.workflow    |.biz    |text/xml<br>.bmp    |application/x-bmp    |.bot    |application/x-bot<br>.c4t    |application/x-c4t    |.c90    |application/x-c90<br>.cal    |application/x-cals    |.cat    |application/vnd.ms-pki.seccat<br>.cdf    |application/x-netcdf    |.cdr    |application/x-cdr<br>.cel    |application/x-cel    |.cer    |application/x-x509-ca-cert<br>.cg4    |application/x-g4    |.cgm    |application/x-cgm<br>.cit    |application/x-cit    |.class    |java/</em><br>.cml    |text/xml    |.cmp    |application/x-cmp<br>.cmx    |application/x-cmx    |.cot    |application/x-cot<br>.crl    |application/pkix-crl    |.crt    |application/x-x509-ca-cert<br>.csi    |application/x-csi    |.css    |text/css<br>.cut    |application/x-cut    |.dbf    |application/x-dbf<br>.dbm    |application/x-dbm    |.dbx    |application/x-dbx<br>.dcd    |text/xml    |.dcx    |application/x-dcx<br>.der    |application/x-x509-ca-cert    |.dgn    |application/x-dgn<br>.dib    |application/x-dib    |.dll    |application/x-msdownload<br>.doc    |application/msword    |.dot    |application/msword<br>.drw    |application/x-drw    |.dtd    |text/xml<br>.dwf    |Model/vnd.dwf    |.dwf    |application/x-dwf<br>.dwg    |application/x-dwg    |.dxb    |application/x-dxb<br>.dxf    |application/x-dxf    |.edn    |application/vnd.adobe.edn<br>.emf    |application/x-emf    |.eml    |message/rfc822<br>.ent    |text/xml    |.epi    |application/x-epi<br>.eps    |application/x-ps    |.eps    |application/postscript<br>.etd    |application/x-ebx    |.exe    |application/x-msdownload<br>.fax    |image/fax    |.fdf    |application/vnd.fdf<br>.fif    |application/fractals    |.fo    |text/xml<br>.frm    |application/x-frm    |.g4    |application/x-g4<br>.gbr    |application/x-gbr    .    |  | application/x-<br>.gif    |image/gif    |.gl2    |application/x-gl2<br>.gp4    |application/x-gp4    |.hgl    |application/x-hgl<br>.hmr    |application/x-hmr    |.hpg    |application/x-hpgl<br>.hpl    |application/x-hpl    .hqx    application/mac-binhex40<br>.hrf    application/x-hrf    |.hta    |application/hta<br>.htc    |text/x-component    |.htm    |text/html<br>.html    |text/html    |.htt    |text/webviewhtml<br>.htx    |text/html    |.icb    |application/x-icb<br>.ico    |image/x-icon    |.ico    |application/x-ico<br>.iff    |application/x-iff    |.ig4    |application/x-g4<br>.igs    |application/x-igs    |.iii    |application/x-iphone<br>.img    |application/x-img    |.ins    |application/x-internet-signup<br>.isp    |application/x-internet-signup    |.IVF    |video/x-ivf<br>.java    |java/*    |.jfif    |image/jpeg<br>.jpe    |image/jpeg    |.jpe    |application/x-jpe<br>.jpeg    |image/jpeg    |.jpg    |image/jpeg<br>.jpg    |application/x-jpg    |.js    |application/x-javascript<br>.jsp    |text/html    |.la1    |audio/x-liquid-file<br>.lar    |application/x-laplayer-reg    |.latex    |application/x-latex<br>.lavs    |audio/x-liquid-secure|    .lbm    |application/x-lbm<br>.lmsff    |audio/x-la-lms    |.ls    |application/x-javascript<br>.ltr    |application/x-ltr    |.m1v    |video/x-mpeg<br>.m2v    |video/x-mpeg    |.m3u    |audio/mpegurl<br>.m4e    |video/mpeg4    |.mac    |application/x-mac<br>.man    |application/x-troff-man    |.math    |text/xml<br>.mdb    |application/msaccess    |.mdb    |application/x-mdb<br>.mfp    |application/x-shockwave-flash    |.mht    |message/rfc822<br>.mhtml    |message/rfc822    |.mi    |application/x-mi<br>.mid    |audio/mid    |.midi    |audio/mid<br>.mil    |application/x-mil    |.mml    |text/xml<br>.mnd    |audio/x-musicnet-download    |.mns    |audio/x-musicnet-stream<br>.mocha    |application/x-javascript    |.movie    |video/x-sgi-movie<br>.mp1    |audio/mp1    |.mp2    |audio/mp2<br>.mp2v    |video/mpeg    |.mp3    |audio/mp3<br>.mp4    |video/mpeg4    |.mpa    |video/x-mpg<br>.mpd    |application/vnd.ms-project    |.mpe    |video/x-mpeg<br>.mpeg    |video/mpg    |.mpg    |video/mpg<br>.mpga    |audio/rn-mpeg    |.mpp    |application/vnd.ms-project<br>.mps    |video/x-mpeg    |.mpt    |application/vnd.ms-project<br>.mpv    |video/mpg    |.mpv2    |video/mpeg<br>.mpw    |application/vnd.ms-project    |.mpx    |application/vnd.ms-project<br>.mtx    |text/xml    |.mxp    |application/x-mmxp<br>.net    |image/pnetvue    |.nrf    |application/x-nrf<br>.nws    | message/rfc822    |.odc    |text/x-ms-odc<br>.out    |application/x-out    |.p10    |application/pkcs10<br>.p12    |application/x-pkcs12    |.p7b    |application/x-pkcs7-certificates<br>.p7c    |application/pkcs7-mime    |.p7m    |application/pkcs7-mime<br>.p7r    |application/x-pkcs7-certreqresp    |.p7s    |application/pkcs7-signature<br>.pc5    |application/x-pc5    |.pci    |application/x-pci<br>.pcl    |application/x-pcl    |.pcx    |application/x-pcx<br>.pdf    |application/pdf    |.pdf    |application/pdf<br>.pdx    |application/vnd.adobe.pdx    |.pfx    |application/x-pkcs12<br>.pgl    |application/x-pgl    |.pic    |application/x-pic<br>.pko    |application/vnd.ms-pki.pko|    .pl    |application/x-perl<br>.plg    |text/html    |.pls    |audio/scpls<br>.plt    |application/x-plt    |.png    |image/png<br>.png    |application/x-png    |.pot    |application/vnd.ms-powerpoint<br>.ppa    |application/vnd.ms-powerpoint    |.ppm    |application/x-ppm<br>.pps    |application/vnd.ms-powerpoint    |.ppt    |application/vnd.ms-powerpoint<br>.ppt    |application/x-ppt    |.pr|    application/x-pr<br>.prf    |application/pics-rules    |.prn    |application/x-prn<br>.prt    |application/x-prt    |.ps    |application/x-ps<br>.ps    |application/postscript    |.ptn    |application/x-ptn<br>.pwz    |application/vnd.ms-powerpoint    |.r3t    |text/vnd.rn-realtext3d<br>.ra    |audio/vnd.rn-realaudio    |.ram    |audio/x-pn-realaudio<br>.ras    |application/x-ras    |.rat    |application/rat-file<br>.rdf    |text/xml    |.rec    |application/vnd.rn-recording<br>.red    |application/x-red    |.rgb    |application/x-rgb<br>.rjs    |application/vnd.rn-realsystem-rjs    |.rjt    |application/vnd.rn-realsystem-rjt<br>.rlc    |application/x-rlc    |.rle    |application/x-rle<br>.rm    |application/vnd.rn-realmedia    |.rmf    |application/vnd.adobe.rmf<br>.rmi    |audio/mid    |.rmj    |application/vnd.rn-realsystem-rmj<br>.rmm    |audio/x-pn-realaudio    |.rmp    |application/vnd.rn-rn_music_package<br>.rms    |application/vnd.rn-realmedia-secure    |.rmvb    |application/vnd.rn-realmedia-vbr<br>.rmx    |application/vnd.rn-realsystem-rmx    |.rnx    |application/vnd.rn-realplayer<br>.rp    |image/vnd.rn-realpix    |.rpm    |audio/x-pn-realaudio-plugin<br>.rsml    |application/vnd.rn-rsml    |.rt    |text/vnd.rn-realtext<br>.rtf    |application/msword    |.rtf    |application/x-rtf<br>.rv    |video/vnd.rn-realvideo    |.sam    |application/x-sam<br>.sat    |application/x-sat    |.sdp    |application/sdp<br>.sdw    |application/x-sdw    |.sit    |application/x-stuffit<br>.slb    |application/x-slb    |.sld    |application/x-sld<br>.slk    |drawing/x-slk    |.smi    |application/smil<br>.smil    |application/smil    |.smk    |application/x-smk<br>.snd    |audio/basic    |.sol    |text/plain<br>.sor    |text/plain|    .spc    |application/x-pkcs7-certificates<br>.spl    |application/futuresplash    |.spp    |text/xml<br>.ssm    |application/streamingmedia    |.sst    |application/vnd.ms-pki.certstore<br>.stl    |application/vnd.ms-pki.stl    |.stm    |text/html<br>.sty    |application/x-sty    |.svg    |text/xml<br>.swf    |application/x-shockwave-flash    |.tdf    |application/x-tdf<br>.tg4    |application/x-tg4    |.tga    |application/x-tga<br>.tif    |image/tiff|    .tif    |application/x-tif<br>.tiff    |image/tiff|    .tld    |text/xml<br>.top    |drawing/x-top    |.torrent    |application/x-bittorrent<br>.tsd    |text/xml    |.txt    |text/plain<br>.uin    |application/x-icq    |.uls    |text/iuls<br>.vcf    |text/x-vcard    |.vda    |application/x-vda<br>.vdx    |application/vnd.visio    |.vml    |text/xml<br>.vpg    |application/x-vpeg005    |.vsd    |application/vnd.visio<br>.vsd    |application/x-vsd    |.vss    |application/vnd.visio<br>.vst    |application/vnd.visio    |.vst    |application/x-vst<br>.vsw    |application/vnd.visio    |.vsx|    application/vnd.visio<br>.vtx    |application/vnd.visio    |.vxml    |text/xml<br>.wav    |audio/wav    |.wax    |audio/x-ms-wax<br>.wb1    |application/x-wb1    |.wb2    |application/x-wb2<br>.wb3    |application/x-wb3    |.wbmp    |image/vnd.wap.wbmp<br>.wiz    |application/msword    |.wk3    |application/x-wk3<br>.wk4    |application/x-wk4    |.wkq    |application/x-wkq<br>.wks    |application/x-wks    |.wm    |video/x-ms-wm<br>.wma    |audio/x-ms-wma    |.wmd    |application/x-ms-wmd<br>.wmf    |application/x-wmf    |.wml    |text/vnd.wap.wml<br>.wmv    |video/x-ms-wmv    |.wmx    |video/x-ms-wmx<br>.wmz    |application/x-ms-wmz    |.wp6    |application/x-wp6<br>.wpd    |application/x-wpd    |.wpg    |application/x-wpg<br>.wpl    |application/vnd.ms-wpl    |.wq1    |application/x-wq1<br>.wr1    |application/x-wr1    |.wri    |application/x-wri<br>.wrk    |application/x-wrk    |.ws    |application/x-ws<br>.ws2    |application/x-ws    |.wsc    |text/scriptlet<br>.wsdl    |text/xml    |.wvx    |video/x-ms-wvx<br>.xdp    |application/vnd.adobe.xdp    |.xdr    |text/xml<br>.xfd    |application/vnd.adobe.xfd    |.xfdf    |application/vnd.adobe.xfdf<br>.xhtml    |text/html    |.xls    |application/vnd.ms-excel<br>.xls    |application/x-xls    |.xlw    |application/x-xlw<br>.xml    |text/xml    |.xpl    |audio/scpls<br>.xq    |text/xml    |.xql    |text/xml<br>.xquery    |text/xml    |.xsd    |text/xml<br>.xsl    |text/xml    |.xslt    |text/xml<br>.xwd    |application/x-xwd    |.x_b    |application/x-x_b<br>.sis    |application/vnd.symbian.install    |.sisx    |application/vnd.symbian.install<br>.x_t    |application/x-x_t    |.ipa    |application/vnd.iphone<br>.apk    |application/vnd.android.package-archive    |.xap    |application/x-silverlight-app</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;即超文本传输协议，是Web通信时使用的协议，所有WWW文件都必须遵守这个标准。HTTP基于TCP/IP通信协议来传输数据（HTML文件、图片文件、查询结果等）。&lt;/p&gt;
&lt;h1 id=&quot;HTTP工作原理&quot;&gt;&lt;a href=&quot;#HTTP工作原理&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
